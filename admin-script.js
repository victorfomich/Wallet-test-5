// –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è DreamWallet
const API_BASE_URL = window.location.origin;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let allUsers = [];
let allAddressSets = [];
let currentTab = 'users';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initializeAdmin();
    setupEventListeners();
    loadInitialData();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ç–∞–±–∞–º
    document.querySelectorAll('.nav-tab').forEach(tab => {
        tab.addEventListener('click', function() {
            switchTab(this.dataset.tab);
        });
    });
    
    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    document.getElementById('userSearch').addEventListener('input', function() {
        filterUsers(this.value);
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
    window.addEventListener('click', function(event) {
        if (event.target.classList.contains('modal')) {
            event.target.style.display = 'none';
        }
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∫–∏
function initializeAdmin() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ DreamWallet');
    showNotification('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å DreamWallet!', 'success');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤
function switchTab(tabName) {
    currentTab = tabName;
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —Ç–∞–±–æ–≤ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    document.querySelectorAll('.nav-tab').forEach(tab => tab.classList.remove('active'));
    document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å
    document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
    document.getElementById(`${tabName}-tab`).classList.add('active');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–∞
    if (tabName === 'users') {
        loadUsers();
    } else if (tabName === 'addresses') {
        loadAddressSets();
    } else if (tabName === 'balances') {
        loadBalances();
    } else if (tabName === 'transactions') {
        loadTransactions();
    } else if (tabName === 'settings') {
        loadSettings();
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function loadInitialData() {
    await Promise.all([
        loadUsers(),
        loadAddressSets()
    ]);
    
    updateStats();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
    const totalUsers = allUsers.length;
    const usedAddresses = allAddressSets.filter(set => set.is_used).length;
    const availableAddresses = allAddressSets.filter(set => !set.is_used).length;
    
    document.getElementById('totalUsers').textContent = totalUsers;
    document.getElementById('usedAddresses').textContent = usedAddresses;
    document.getElementById('availableAddresses').textContent = availableAddresses;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function loadUsers() {
    try {
        showLoading('usersTableBody');
        
        const response = await fetch(`${API_BASE_URL}/api/admin/users`);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        allUsers = data.users || [];
        
        renderUsersTable(allUsers);
        updateStats();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        showError('usersTableBody', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' + error.message);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'error');
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function renderUsersTable(users) {
    const tbody = document.getElementById('usersTableBody');
    
    if (users.length === 0) {
        tbody.innerHTML = '<tr><td colspan="7" class="text-center text-muted">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>';
        return;
    }
    
    tbody.innerHTML = users.map(user => `
        <tr>
            <td>${user.id}</td>
            <td><strong>${user.telegram_id}</strong></td>
            <td>${user.first_name}${user.last_name ? ' ' + user.last_name : ''}</td>
            <td>${user.username ? '@' + user.username : '-'}</td>
            <td>${user.address_set_id ? `–ù–∞–±–æ—Ä #${user.address_set_id}` : '-'}</td>
            <td>${formatDate(user.created_at)}</td>
            <td>
                <button onclick="viewUserDetails(${user.id})" class="btn btn-secondary btn-small">üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä</button>
                <button onclick="resetUserAddresses(${user.id})" class="btn btn-warning btn-small">üîÑ –°–±—Ä–æ—Å</button>
                <button onclick="deleteUser(${user.id})" class="btn btn-danger btn-small">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
            </td>
        </tr>
    `).join('');
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function filterUsers(searchTerm) {
    if (!searchTerm.trim()) {
        renderUsersTable(allUsers);
        return;
    }
    
    const filtered = allUsers.filter(user => 
        user.telegram_id.toString().includes(searchTerm) ||
        user.first_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        (user.last_name && user.last_name.toLowerCase().includes(searchTerm.toLowerCase())) ||
        (user.username && user.username.toLowerCase().includes(searchTerm.toLowerCase()))
    );
    
    renderUsersTable(filtered);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–±–æ—Ä–æ–≤ –∞–¥—Ä–µ—Å–æ–≤
async function loadAddressSets() {
    try {
        showLoading('addressesTableBody');
        
        const response = await fetch(`${API_BASE_URL}/api/admin/address-sets`);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        allAddressSets = data.address_sets || [];
        
        renderAddressSetsTable(allAddressSets);
        updateStats();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–±–æ—Ä–æ–≤ –∞–¥—Ä–µ—Å–æ–≤:', error);
        showError('addressesTableBody', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–±–æ—Ä–æ–≤ –∞–¥—Ä–µ—Å–æ–≤: ' + error.message);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–±–æ—Ä–æ–≤ –∞–¥—Ä–µ—Å–æ–≤', 'error');
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–±–æ—Ä–æ–≤ –∞–¥—Ä–µ—Å–æ–≤
function renderAddressSetsTable(addressSets) {
    const tbody = document.getElementById('addressesTableBody');
    
    if (addressSets.length === 0) {
        tbody.innerHTML = '<tr><td colspan="12" class="text-center text-muted">–ù–∞–±–æ—Ä—ã –∞–¥—Ä–µ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>';
        return;
    }
    
    tbody.innerHTML = addressSets.map(set => `
        <tr>
            <td>${set.id}</td>
            <td><strong>${set.name}</strong></td>
            <td class="text-small">
                <div title="${set.ton_address}">${truncateAddress(set.ton_address)}</div>
                <div class="secret-preview" title="${set.ton_secret}">üîë ${truncateSecret(set.ton_secret)}</div>
            </td>
            <td class="text-small">
                <div title="${set.tron_address}">${truncateAddress(set.tron_address)}</div>
                <div class="secret-preview" title="${set.tron_secret}">üîë ${truncateSecret(set.tron_secret)}</div>
            </td>
            <td class="text-small">
                <div title="${set.sol_address}">${truncateAddress(set.sol_address)}</div>
                <div class="secret-preview" title="${set.sol_secret}">üîë ${truncateSecret(set.sol_secret)}</div>
            </td>
            <td class="text-small">
                <div title="${set.eth_address}">${truncateAddress(set.eth_address)}</div>
                <div class="secret-preview" title="${set.eth_secret}">üîë ${truncateSecret(set.eth_secret)}</div>
            </td>
            <td class="text-small">
                <div title="${set.bnb_address}">${truncateAddress(set.bnb_address)}</div>
                <div class="secret-preview" title="${set.bnb_secret}">üîë ${truncateSecret(set.bnb_secret)}</div>
            </td>
            <td>
                <span class="status-badge ${set.is_used ? 'status-used' : 'status-available'}">
                    ${set.is_used ? '–ó–∞–Ω—è—Ç' : '–°–≤–æ–±–æ–¥–µ–Ω'}
                </span>
            </td>
            <td>${set.assigned_to_telegram_id || '-'}</td>
            <td>
                <button onclick="editAddressSet(${set.id})" class="btn btn-secondary btn-small">‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å</button>
                <button onclick="deleteAddressSet(${set.id})" class="btn btn-danger btn-small">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
            </td>
        </tr>
    `).join('');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–æ–≤
function showAddAddressSetModal() {
    document.getElementById('addAddressSetModal').style.display = 'block';
}

// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä –∞–¥—Ä–µ—Å–æ–≤
async function addAddressSet() {
    const form = document.getElementById('addAddressSetForm');
    const formData = new FormData(form);
    
    const addressSetData = {
        name: formData.get('setName'),
        addresses: {
            ton: formData.get('tonAddress') || null,
            tron: formData.get('tronAddress') || null,
            sol: formData.get('solAddress') || null,
            eth: formData.get('ethAddress') || null,
            bnb: formData.get('bnbAddress') || null
        },
        secrets: {
            ton: formData.get('tonSecret') || null,
            tron: formData.get('tronSecret') || null,
            sol: formData.get('solSecret') || null,
            eth: formData.get('ethSecret') || null,
            bnb: formData.get('bnbSecret') || null
        }
    };
    
    if (!addressSetData.name.trim()) {
        showNotification('–£–∫–∞–∂–∏—Ç–µ –∏–º—è –Ω–∞–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–æ–≤', 'error');
        return;
    }
    
    try {
        const response = await fetch(`${API_BASE_URL}/api/admin/address-sets`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(addressSetData)
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            showNotification('–ù–∞–±–æ—Ä –∞–¥—Ä–µ—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
            closeModal('addAddressSetModal');
            form.reset();
            await loadAddressSets();
        } else {
            throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–æ–≤: ' + error.message, 'error');
    }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–±–æ—Ä –∞–¥—Ä–µ—Å–æ–≤
function editAddressSet(id) {
    const addressSet = allAddressSets.find(set => set.id === id);
    if (!addressSet) {
        showNotification('–ù–∞–±–æ—Ä –∞–¥—Ä–µ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –∞–¥—Ä–µ—Å–∞–º–∏ –∏ —Å–µ–∫—Ä–µ—Ç–∞–º–∏
    document.getElementById('editSetId').value = addressSet.id;
    document.getElementById('editSetName').value = addressSet.name;
    
    // –ê–¥—Ä–µ—Å–∞
    document.getElementById('editTonAddress').value = addressSet.ton_address || '';
    document.getElementById('editTronAddress').value = addressSet.tron_address || '';
    document.getElementById('editSolAddress').value = addressSet.sol_address || '';
    document.getElementById('editEthAddress').value = addressSet.eth_address || '';
    document.getElementById('editBnbAddress').value = addressSet.bnb_address || '';
    
    // –°–µ–∫—Ä–µ—Ç—ã
    document.getElementById('editTonSecret').value = addressSet.ton_secret || '';
    document.getElementById('editTronSecret').value = addressSet.tron_secret || '';
    document.getElementById('editSolSecret').value = addressSet.sol_secret || '';
    document.getElementById('editEthSecret').value = addressSet.eth_secret || '';
    document.getElementById('editBnbSecret').value = addressSet.bnb_secret || '';
    
    document.getElementById('editAddressSetModal').style.display = 'block';
}

// –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–±–æ—Ä –∞–¥—Ä–µ—Å–æ–≤
async function updateAddressSet() {
    const id = document.getElementById('editSetId').value;
    const form = document.getElementById('editAddressSetForm');
    const formData = new FormData(form);
    
    const updateData = {
        addresses: {
            ton: formData.get('editTonAddress') || null,
            tron: formData.get('editTronAddress') || null,
            sol: formData.get('editSolAddress') || null,
            eth: formData.get('editEthAddress') || null,
            bnb: formData.get('editBnbAddress') || null
        },
        secrets: {
            ton: formData.get('editTonSecret') || null,
            tron: formData.get('editTronSecret') || null,
            sol: formData.get('editSolSecret') || null,
            eth: formData.get('editEthSecret') || null,
            bnb: formData.get('editBnbSecret') || null
        }
    };
    
    try {
        const response = await fetch(`${API_BASE_URL}/api/admin/address-sets?id=${id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(updateData)
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            showNotification('–ù–∞–±–æ—Ä –∞–¥—Ä–µ—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
            closeModal('editAddressSetModal');
            await loadAddressSets();
        } else {
            throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–æ–≤: ' + error.message, 'error');
    }
}

// –£–¥–∞–ª–∏—Ç—å –Ω–∞–±–æ—Ä –∞–¥—Ä–µ—Å–æ–≤
async function deleteAddressSet(id) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –Ω–∞–±–æ—Ä –∞–¥—Ä–µ—Å–æ–≤?')) {
        return;
    }
    
    try {
        const response = await fetch(`${API_BASE_URL}/api/admin/address-sets/${id}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            showNotification('–ù–∞–±–æ—Ä –∞–¥—Ä–µ—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', 'success');
            await loadAddressSets();
        } else {
            throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–æ–≤: ' + error.message, 'error');
    }
}

// –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–º–ø–æ—Ä—Ç–∞
function previewImport() {
    const importData = document.getElementById('importData').value.trim();
    const previewDiv = document.getElementById('importPreview');
    const contentDiv = document.getElementById('importPreviewContent');
    
    if (!importData) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞', 'warning');
        return;
    }
    
    const lines = importData.split('\n').filter(line => line.trim());
    const parsedData = [];
    const errors = [];
    
    lines.forEach((line, index) => {
        try {
            const parsed = parseImportLine(line);
            if (parsed) {
                parsedData.push(parsed);
            }
        } catch (error) {
            errors.push(`–°—Ç—Ä–æ–∫–∞ ${index + 1}: ${error.message}`);
        }
    });
    
    let html = `<p><strong>–ë—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:</strong> ${parsedData.length} –Ω–∞–±–æ—Ä–æ–≤ –∞–¥—Ä–µ—Å–æ–≤</p>`;
    
    if (errors.length > 0) {
        html += `<div style="color: red; margin: 10px 0;"><strong>–û—à–∏–±–∫–∏:</strong><ul>`;
        errors.forEach(error => {
            html += `<li>${error}</li>`;
        });
        html += `</ul></div>`;
    }
    
    if (parsedData.length > 0) {
        html += `<div style="max-height: 200px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; margin-top: 10px;">`;
        parsedData.forEach(item => {
            html += `<div style="margin-bottom: 5px;"><strong>${item.name}</strong> - TON: ${item.addresses.ton ? '‚úì' : '‚úó'}, TRON: ${item.addresses.tron ? '‚úì' : '‚úó'}, SOL: ${item.addresses.sol ? '‚úì' : '‚úó'}, ETH: ${item.addresses.eth ? '‚úì' : '‚úó'}, BNB: ${item.addresses.bnb ? '‚úì' : '‚úó'}</div>`;
        });
        html += `</div>`;
    }
    
    contentDiv.innerHTML = html;
    previewDiv.style.display = 'block';
}

// –í—ã–ø–æ–ª–Ω–∏—Ç—å –∏–º–ø–æ—Ä—Ç
async function executeImport() {
    const importData = document.getElementById('importData').value.trim();
    
    if (!importData) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞', 'warning');
        return;
    }
    
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏–º–ø–æ—Ä—Ç?')) {
        return;
    }
    
    const lines = importData.split('\n').filter(line => line.trim());
    const successCount = [];
    const errorCount = [];
    
    for (let i = 0; i < lines.length; i++) {
        try {
            const parsed = parseImportLine(lines[i]);
            if (parsed) {
                const response = await fetch(`${API_BASE_URL}/api/admin/address-sets`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(parsed)
                });
                
                if (response.ok) {
                    successCount.push(parsed.name);
                } else {
                    errorCount.push(`${parsed.name}: HTTP ${response.status}`);
                }
            }
        } catch (error) {
            errorCount.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: ${error.message}`);
        }
    }
    
    const message = `–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –£—Å–ø–µ—à–Ω–æ: ${successCount.length}, –û—à–∏–±–æ–∫: ${errorCount.length}`;
    showNotification(message, errorCount.length === 0 ? 'success' : 'warning');
    
    if (errorCount.length > 0) {
        console.error('–û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞:', errorCount);
    }
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    document.getElementById('importData').value = '';
    document.getElementById('importPreview').style.display = 'none';
    await loadAddressSets();
}

// –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
function parseImportLine(line) {
    const parts = line.split(',').map(part => part.trim());
    
    if (parts.length < 2) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä–æ–∫–µ');
    }
    
    const name = parts[0];
    if (!name) {
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è –Ω–∞–±–æ—Ä–∞');
    }
    
    const addresses = {
        ton: null,
        tron: null,
        sol: null,
        eth: null,
        bnb: null
    };
    
    // –ü–∞—Ä—Å–∏–º –∞–¥—Ä–µ—Å–∞
    for (let i = 1; i < parts.length; i++) {
        const part = parts[i];
        const colonIndex = part.indexOf(':');
        
        if (colonIndex > 0) {
            const network = part.substring(0, colonIndex).toLowerCase();
            const address = part.substring(colonIndex + 1);
            
            if (addresses.hasOwnProperty(network) && address) {
                addresses[network] = address;
            }
        }
    }
    
    return { name, addresses };
}

// –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function refreshUsers() {
    await loadUsers();
    showNotification('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
}

// –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–±–æ—Ä–æ–≤ –∞–¥—Ä–µ—Å–æ–≤
async function refreshAddresses() {
    await loadAddressSets();
    showNotification('–î–∞–Ω–Ω—ã–µ –Ω–∞–±–æ—Ä–æ–≤ –∞–¥—Ä–µ—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function truncateAddress(address) {
    if (!address) return '-';
    if (address.length <= 16) return address;
    return address.substring(0, 8) + '...' + address.substring(address.length - 8);
}

function formatDate(dateString) {
    if (!dateString) return '-';
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU') + ' ' + date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
}

function showLoading(elementId) {
    document.getElementById(elementId).innerHTML = '<tr><td colspan="10" class="loading"><div class="loading-spinner"></div>–ó–∞–≥—Ä—É–∑–∫–∞...</td></tr>';
}

function showError(elementId, message) {
    document.getElementById(elementId).innerHTML = `<tr><td colspan="10" class="text-center" style="color: red; padding: 40px;">${message}</td></tr>`;
}

// –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    document.getElementById('notifications').appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
        }
    }, 5000);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ –∫–ª–∏–∫—É
    notification.addEventListener('click', function() {
        if (this.parentNode) {
            this.parentNode.removeChild(this);
        }
    });
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
async function viewUserDetails(userId) {
    const user = allUsers.find(u => u.id === userId);
    if (!user) {
        showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }
    
    const details = `
        ID: ${user.id}
        Telegram ID: ${user.telegram_id}
        –ò–º—è: ${user.first_name} ${user.last_name || ''}
        Username: ${user.username ? '@' + user.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}
        –ù–∞–±–æ—Ä –∞–¥—Ä–µ—Å–æ–≤: ${user.address_set_id ? '#' + user.address_set_id : '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}
        –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${formatDate(user.created_at)}
    `;
    
    alert(details);
}

async function resetUserAddresses(userId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')) {
        return;
    }
    
    try {
        const response = await fetch(`${API_BASE_URL}/api/admin/users/${userId}/reset`, {
            method: 'POST'
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            showNotification('–ê–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã', 'success');
            await loadUsers();
            await loadAddressSets();
        } else {
            throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∞–¥—Ä–µ—Å–æ–≤: ' + error.message, 'error');
    }
}

async function deleteUser(userId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')) {
        return;
    }
    
    try {
        const response = await fetch(`${API_BASE_URL}/api/admin/users/${userId}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', 'success');
            await loadUsers();
            await loadAddressSets();
        } else {
            throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + error.message, 'error');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤
function truncateSecret(secret) {
    if (!secret) return '–ù–µ –∑–∞–¥–∞–Ω';
    if (secret.length <= 20) return secret;
    return secret.substring(0, 8) + '...' + secret.substring(secret.length - 4);
}

// ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ë–ê–õ–ê–ù–°–û–í ====================

let allBalances = [];

// –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤
async function loadBalances() {
    try {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–∞–ª–∞–Ω—Å–æ–≤...');
        showLoading('balancesTableBody');
        
        const url = `${API_BASE_URL}/api/admin/balances`;
        console.log('üì° –ó–∞–ø—Ä–æ—Å –∫:', url);
        
        const response = await fetch(url);
        console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
        
        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:', errorText);
            throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
        }
        
        const data = await response.json();
        console.log('üìã –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', data);
        
        allBalances = data.balances || [];
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allBalances.length} –±–∞–ª–∞–Ω—Å–æ–≤`);
        
        if (allBalances.length === 0) {
            console.log('‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å—ã –ø—É—Å—Ç—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ API:', data.message);
            
            // –ï—Å–ª–∏ API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –±–∞–ª–∞–Ω—Å—ã –ø—É—Å—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (data.success && data.message) {
                document.getElementById('balancesTableBody').innerHTML = 
                    `<tr><td colspan="8" class="text-center text-muted">
                        ${data.message}<br>
                        <small>API —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...</small>
                        <br><button onclick="loadBalances()" class="btn btn-secondary btn-small" style="margin-top: 10px;">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
                    </td></tr>`;
                return;
            }
        }
        
        renderBalancesTable(allBalances);
        
    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤:', error);
        
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞
        const errorHtml = `
            <tr><td colspan="8" class="text-center text-muted">
                <div>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤</div>
                <div style="font-size: 12px; margin-top: 8px; color: #666;">
                    ${error.message}
                </div>
                <button onclick="loadBalances()" class="btn btn-secondary btn-small" style="margin-top: 10px;">
                    üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
                <button onclick="checkApiStatus()" class="btn btn-secondary btn-small" style="margin-top: 10px; margin-left: 5px;">
                    üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                </button>
            </td></tr>
        `;
        
        document.getElementById('balancesTableBody').innerHTML = errorHtml;
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤: ' + error.message, 'error');
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
async function checkApiStatus() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API
        const debugResponse = await fetch(`${API_BASE_URL}/api/debug`);
        const debugData = await debugResponse.json();
        
        console.log('üîß –î–∞–Ω–Ω—ã–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', debugData);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –±–∞–ª–∞–Ω—Å–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
        const balancesResponse = await fetch(`${API_BASE_URL}/api/admin/balances`);
        const balancesText = await balancesResponse.text();
        
        console.log('üí∞ –û—Ç–≤–µ—Ç API –±–∞–ª–∞–Ω—Å–æ–≤:', balancesText);
        
        alert(`
üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API:

1. –û—Å–Ω–æ–≤–Ω–æ–π API: ${debugResponse.ok ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –û—à–∏–±–∫–∞'}
2. API –±–∞–ª–∞–Ω—Å–æ–≤: ${balancesResponse.ok ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –û—à–∏–±–∫–∞'}
3. –°—Ç–∞—Ç—É—Å: ${balancesResponse.status}

–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ (F12)
        `);
        
    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ' + error.message);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–ª–∞–Ω—Å–æ–≤
function renderBalancesTable(balances) {
    const tbody = document.getElementById('balancesTableBody');
    
    if (balances.length === 0) {
        tbody.innerHTML = '<tr><td colspan="8" class="text-center text-muted">–ë–∞–ª–∞–Ω—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>';
        return;
    }
    
    tbody.innerHTML = balances.map(balance => {
        const user = balance.users || {};
        const userName = user.first_name ? 
            `${user.first_name}${user.last_name ? ' ' + user.last_name : ''}` : 
            `User ${balance.telegram_id}`;
            
        return `
            <tr>
                <td>
                    <strong>${userName}</strong><br>
                    <small>ID: ${balance.telegram_id}</small>
                </td>
                <td>
                    <strong>$${parseFloat(balance.total_usd_balance || 0).toFixed(2)}</strong>
                </td>
                <td class="balance-preview">
                    <div>${parseFloat(balance.usdt_amount || 0).toFixed(6)} USDT</div>
                    <div>$${parseFloat(balance.usdt_price || 0).toFixed(2)}</div>
                    <div class="${parseFloat(balance.usdt_change_percent) >= 0 ? 'positive' : 'negative'}">
                        ${parseFloat(balance.usdt_change_percent || 0).toFixed(2)}%
                    </div>
                    <div>$${parseFloat(balance.usdt_usd_value || 0).toFixed(8)}</div>
                </td>
                <td class="balance-preview">
                    <div>${parseFloat(balance.eth_amount || 0).toFixed(8)} ETH</div>
                    <div>$${parseFloat(balance.eth_price || 0).toFixed(2)}</div>
                    <div class="${parseFloat(balance.eth_change_percent) >= 0 ? 'positive' : 'negative'}">
                        ${parseFloat(balance.eth_change_percent || 0).toFixed(2)}%
                    </div>
                    <div>$${parseFloat(balance.eth_usd_value || 0).toFixed(8)}</div>
                </td>
                <td class="balance-preview">
                    <div>${parseFloat(balance.ton_amount || 0).toFixed(8)} TON</div>
                    <div>$${parseFloat(balance.ton_price || 0).toFixed(2)}</div>
                    <div class="${parseFloat(balance.ton_change_percent) >= 0 ? 'positive' : 'negative'}">
                        ${parseFloat(balance.ton_change_percent || 0).toFixed(2)}%
                    </div>
                    <div>$${parseFloat(balance.ton_usd_value || 0).toFixed(8)}</div>
                </td>
                <td class="balance-preview">
                    <div>${parseFloat(balance.sol_amount || 0).toFixed(8)} SOL</div>
                    <div>$${parseFloat(balance.sol_price || 0).toFixed(2)}</div>
                    <div class="${parseFloat(balance.sol_change_percent) >= 0 ? 'positive' : 'negative'}">
                        ${parseFloat(balance.sol_change_percent || 0).toFixed(2)}%
                    </div>
                    <div>$${parseFloat(balance.sol_usd_value || 0).toFixed(8)}</div>
                </td>
                <td class="balance-preview">
                    <div>${parseFloat(balance.trx_amount || 0).toFixed(8)} TRX</div>
                    <div>$${parseFloat(balance.trx_price || 0).toFixed(2)}</div>
                    <div class="${parseFloat(balance.trx_change_percent) >= 0 ? 'positive' : 'negative'}">
                        ${parseFloat(balance.trx_change_percent || 0).toFixed(2)}%
                    </div>
                    <div>$${parseFloat(balance.trx_usd_value || 0).toFixed(8)}</div>
                </td>
                <td>
                    <button onclick="editUserBalance(${balance.telegram_id})" class="btn btn-secondary btn-small">‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å</button>
                </td>
            </tr>
        `;
    }).join('');
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function editUserBalance(telegramId) {
    const balance = allBalances.find(b => b.telegram_id == telegramId);
    if (!balance) {
        showNotification('–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }
    
    const user = balance.users || {};
    const userName = user.first_name ? 
        `${user.first_name}${user.last_name ? ' ' + user.last_name : ''}` : 
        `User ${telegramId}`;
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    document.getElementById('editBalanceTelegramId').value = telegramId;
    document.getElementById('editBalanceUserName').textContent = userName;
    
    // USDT
    document.getElementById('editUsdtAmount').value = balance.usdt_amount || 0;
    document.getElementById('editUsdtPrice').value = balance.usdt_price || 0;
    document.getElementById('editUsdtChange').value = balance.usdt_change_percent || 0;
    document.getElementById('editUsdtUsdValue').value = balance.usdt_usd_value || 0;
    
    // ETH
    document.getElementById('editEthAmount').value = balance.eth_amount || 0;
    document.getElementById('editEthPrice').value = balance.eth_price || 0;
    document.getElementById('editEthChange').value = balance.eth_change_percent || 0;
    document.getElementById('editEthUsdValue').value = balance.eth_usd_value || 0;
    
    // TON
    document.getElementById('editTonAmount').value = balance.ton_amount || 0;
    document.getElementById('editTonPrice').value = balance.ton_price || 0;
    document.getElementById('editTonChange').value = balance.ton_change_percent || 0;
    document.getElementById('editTonUsdValue').value = balance.ton_usd_value || 0;
    
    // SOL
    document.getElementById('editSolAmount').value = balance.sol_amount || 0;
    document.getElementById('editSolPrice').value = balance.sol_price || 0;
    document.getElementById('editSolChange').value = balance.sol_change_percent || 0;
    document.getElementById('editSolUsdValue').value = balance.sol_usd_value || 0;
    
    // TRX
    document.getElementById('editTrxAmount').value = balance.trx_amount || 0;
    document.getElementById('editTrxPrice').value = balance.trx_price || 0;
    document.getElementById('editTrxChange').value = balance.trx_change_percent || 0;
    document.getElementById('editTrxUsdValue').value = balance.trx_usd_value || 0;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
    updateTotalPreview();
    
    document.getElementById('editBalanceModal').style.display = 'block';
}

// –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–≤—å—é –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
function updateTotalPreview() {
    const usdtAmount = parseFloat(document.getElementById('editUsdtAmount').value || 0);
    const usdtPrice = parseFloat(document.getElementById('editUsdtPrice').value || 0);
    
    const ethAmount = parseFloat(document.getElementById('editEthAmount').value || 0);
    const ethPrice = parseFloat(document.getElementById('editEthPrice').value || 0);
    
    const tonAmount = parseFloat(document.getElementById('editTonAmount').value || 0);
    const tonPrice = parseFloat(document.getElementById('editTonPrice').value || 0);
    
    const solAmount = parseFloat(document.getElementById('editSolAmount').value || 0);
    const solPrice = parseFloat(document.getElementById('editSolPrice').value || 0);
    
    const trxAmount = parseFloat(document.getElementById('editTrxAmount').value || 0);
    const trxPrice = parseFloat(document.getElementById('editTrxPrice').value || 0);
    
    const total = (usdtAmount * usdtPrice) + (ethAmount * ethPrice) + 
                  (tonAmount * tonPrice) + (solAmount * solPrice) + 
                  (trxAmount * trxPrice);
    
    document.getElementById('editBalanceTotalPreview').textContent = total.toFixed(2);
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function updateUserBalance() {
    const telegramId = document.getElementById('editBalanceTelegramId').value;
    
    const updateData = {
        // USDT
        usdt_amount: parseFloat(document.getElementById('editUsdtAmount').value || 0),
        usdt_price: parseFloat(document.getElementById('editUsdtPrice').value || 0),
        usdt_change_percent: parseFloat(document.getElementById('editUsdtChange').value || 0),
        usdt_usd_value: parseFloat(document.getElementById('editUsdtUsdValue').value || 0),
        
        // ETH
        eth_amount: parseFloat(document.getElementById('editEthAmount').value || 0),
        eth_price: parseFloat(document.getElementById('editEthPrice').value || 0),
        eth_change_percent: parseFloat(document.getElementById('editEthChange').value || 0),
        eth_usd_value: parseFloat(document.getElementById('editEthUsdValue').value || 0),
        
        // TON
        ton_amount: parseFloat(document.getElementById('editTonAmount').value || 0),
        ton_price: parseFloat(document.getElementById('editTonPrice').value || 0),
        ton_change_percent: parseFloat(document.getElementById('editTonChange').value || 0),
        ton_usd_value: parseFloat(document.getElementById('editTonUsdValue').value || 0),
        
        // SOL
        sol_amount: parseFloat(document.getElementById('editSolAmount').value || 0),
        sol_price: parseFloat(document.getElementById('editSolPrice').value || 0),
        sol_change_percent: parseFloat(document.getElementById('editSolChange').value || 0),
        sol_usd_value: parseFloat(document.getElementById('editSolUsdValue').value || 0),
        
        // TRX
        trx_amount: parseFloat(document.getElementById('editTrxAmount').value || 0),
        trx_price: parseFloat(document.getElementById('editTrxPrice').value || 0),
        trx_change_percent: parseFloat(document.getElementById('editTrxChange').value || 0),
        trx_usd_value: parseFloat(document.getElementById('editTrxUsdValue').value || 0)
    };
    
    try {
        const response = await fetch(`${API_BASE_URL}/api/admin/balances?telegram_id=${telegramId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(updateData)
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            showNotification('–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
            closeModal('editBalanceModal');
            await loadBalances(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        } else {
            throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ' + error.message, 'error');
    }
}

// –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã
function refreshBalances() {
    loadBalances();
}

// –°–æ–∑–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function createBalancesForAllUsers() {
    if (!confirm('–°–æ–∑–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –±–∞–ª–∞–Ω—Å–æ–≤?\n\n–≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–∞–ª–∞–Ω—Å—ã.')) {
        return;
    }
    
    try {
        console.log('üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const usersResponse = await fetch(`${API_BASE_URL}/api/admin/users`);
        const usersData = await usersResponse.json();
        const users = usersData.users || [];
        
        console.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        
        if (users.length === 0) {
            showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'warning');
            return;
        }
        
        let created = 0;
        let errors = 0;
        
        // –°–æ–∑–¥–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for (const user of users) {
            try {
                const response = await fetch(`${API_BASE_URL}/api/admin/balances`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        telegram_id: user.telegram_id
                    })
                });
                
                if (response.ok) {
                    created++;
                    console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å —Å–æ–∑–¥–∞–Ω –¥–ª—è ${user.telegram_id}`);
                } else {
                    const errorText = await response.text();
                    console.log(`‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –¥–ª—è ${user.telegram_id}:`, errorText);
                }
                
            } catch (error) {
                errors++;
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è ${user.telegram_id}:`, error);
            }
        }
        
        const message = `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤: ${created}\n–û—à–∏–±–æ–∫: ${errors}`;
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', message);
        
        showNotification(message, created > 0 ? 'success' : 'info');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        await loadBalances();
        
    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: ' + error.message, 'error');
    }
}

// ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ====================

async function loadTransactions() {
    try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
        
        const response = await fetch('/api/transactions?admin=true', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.success) {
            renderTransactionsTable(data.transactions);
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ' + error.message, 'error');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ
        const tbody = document.getElementById('transactionsTableBody');
        if (tbody) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="11" class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}</td>
                </tr>
            `;
        }
    }
}

function renderTransactionsTable(transactions) {
    const tbody = document.getElementById('transactionsTableBody');
    if (!tbody) return;
    
    if (!transactions || transactions.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="12" class="no-data">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td>
            </tr>
        `;
        return;
    }
    
    tbody.innerHTML = transactions.map(transaction => {
        const userInfo = transaction.user_info || { first_name: 'Unknown', telegram_id: transaction.user_telegram_id };
        const date = new Date(transaction.created_timestamp).toLocaleString('ru-RU');
        
        return `
            <tr>
                <td><input type="checkbox" class="tx-select" data-id="${transaction.id}" onchange="updateTxSelectionState()"></td>
                <td>${transaction.id}</td>
                <td>
                    <strong>${userInfo.first_name || 'Unknown'}</strong><br>
                    <small>ID: ${userInfo.telegram_id}</small>
                </td>
                <td>
                    <span class="badge badge-${transaction.transaction_type === 'withdraw' ? 'warning' : 'info'}">
                        ${transaction.transaction_type === 'withdraw' ? '–í—ã–≤–æ–¥' : transaction.transaction_type}
                    </span>
                </td>
                <td>${transaction.crypto_currency}</td>
                <td>
                    <span class="badge badge-secondary">
                        ${transaction.blockchain_network.toUpperCase()}
                    </span>
                </td>
                <td>
                    <strong>${transaction.withdraw_amount}</strong>
                </td>
                <td>${transaction.network_fee || '0'}</td>
                <td>
                    <div class="address-cell">
                        <span class="address-preview">${transaction.recipient_address.substring(0, 8)}...</span>
                        <button onclick="copyToClipboard('${transaction.recipient_address}')" class="btn-copy" title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å">
                            üìã
                        </button>
                    </div>
                </td>
                <td>
                    <span class="badge badge-${getStatusBadgeClass(transaction.transaction_status)}">
                        ${getStatusText(transaction.transaction_status)}
                    </span>
                </td>
                <td>${date}</td>
                <td>
                    <div class="action-buttons">
                        <button onclick="editTransaction(${transaction.id})" class="btn btn-sm btn-secondary" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                            ‚úèÔ∏è
                        </button>
                        <button onclick="deleteTransaction(${transaction.id})" class="btn btn-sm btn-danger" title="–£–¥–∞–ª–∏—Ç—å">
                            üóëÔ∏è
                        </button>
                    </div>
                </td>
            </tr>
        `;
    }).join('');

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —á–µ–∫–±–æ–∫—Å "–≤—ã–±—Ä–∞—Ç—å –≤—Å–µ"
    const selectAll = document.getElementById('selectAllTx');
    if (selectAll) selectAll.checked = false;
    updateTxSelectionState();
}

function getStatusBadgeClass(status) {
    switch (status) {
        case 'pending': return 'warning';
        case 'completed': return 'success';
        case 'failed': return 'danger';
        case 'cancelled': return 'secondary';
        default: return 'info';
    }
}

function getStatusText(status) {
    switch (status) {
        case 'pending': return '–í –æ–∂–∏–¥–∞–Ω–∏–∏';
        case 'completed': return '–ó–∞–≤–µ—Ä—à–µ–Ω–∞';
        case 'failed': return '–û—à–∏–±–∫–∞';
        case 'cancelled': return '–û—Ç–º–µ–Ω–µ–Ω–∞';
        default: return status;
    }
}

async function editTransaction(id) {
    try {
        const resp = await fetch(`/api/transactions?admin=true&transaction_id=${id}`);
        const data = await resp.json();
        if (!resp.ok || !data.success || !data.transaction) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é');
        const tx = data.transaction;
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('editTxId').value = tx.id;
        document.getElementById('editTxType').value = tx.transaction_type || 'withdraw';
        document.getElementById('editTxStatus').value = tx.transaction_status || 'pending';
        document.getElementById('editTxAmount').value = tx.withdraw_amount || 0;
        document.getElementById('editTxFee').value = tx.network_fee || 0;
        document.getElementById('editTxCrypto').value = tx.crypto_currency || '';
        document.getElementById('editTxNetwork').value = tx.blockchain_network || '';
        document.getElementById('editTxAddress').value = tx.recipient_address || '';
        document.getElementById('editTxHash').value = tx.blockchain_hash || '';
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ISO –≤ datetime-local
        const dt = tx.created_timestamp ? new Date(tx.created_timestamp) : null;
        if (dt && !isNaN(dt.getTime())) {
            const tzOffset = dt.getTimezoneOffset() * 60000;
            const localISO = new Date(dt - tzOffset).toISOString().slice(0,16);
            document.getElementById('editTxCreated').value = localISO;
        } else {
            document.getElementById('editTxCreated').value = '';
        }
        document.getElementById('editTransactionModal').style.display = 'block';
    } catch (e) {
        console.error(e);
        showNotification('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', 'error');
    }
}

async function saveTransactionEdits() {
    const id = document.getElementById('editTxId').value;
    const type = document.getElementById('editTxType').value;
    const status = document.getElementById('editTxStatus').value;
    const amount = parseFloat(document.getElementById('editTxAmount').value || 0);
    const fee = parseFloat(document.getElementById('editTxFee').value || 0);
    const crypto = (document.getElementById('editTxCrypto').value || '').toUpperCase();
    const network = (document.getElementById('editTxNetwork').value || '').toLowerCase();
    const address = document.getElementById('editTxAddress').value || '';
    const tx_hash = document.getElementById('editTxHash').value || '';
    const createdLocal = document.getElementById('editTxCreated').value; // yyyy-MM-ddTHH:mm
    let created_timestamp = null;
    if (createdLocal) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ ISO
        const dt = new Date(createdLocal);
        if (!isNaN(dt.getTime())) {
            created_timestamp = dt.toISOString();
        }
    }
    try {
        const resp = await fetch(`/api/transactions?id=${id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ status, tx_hash, type, amount, fee, address, crypto, network, created_timestamp })
        });
        const data = await resp.json();
        if (!resp.ok || !data.success) throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        showNotification('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success');
        closeModal('editTransactionModal');
        loadTransactions();
    } catch (e) {
        console.error(e);
        showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ' + e.message, 'error');
    }
}

async function deleteTransaction(id) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        return;
    }
    
    try {
        const response = await fetch(`/api/transactions?admin=true&id=${id}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.success) {
            showNotification('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞', 'success');
            loadTransactions(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ' + error.message, 'error');
    }
}

function refreshTransactions() {
    loadTransactions();
}

// ======================== BULK DELETE ========================

function toggleSelectAllTx(master) {
    const checks = document.querySelectorAll('.tx-select');
    checks.forEach(c => c.checked = master.checked);
    updateTxSelectionState();
}

function getSelectedTransactionIds() {
    return Array.from(document.querySelectorAll('.tx-select:checked')).map(el => el.dataset.id);
}

function updateTxSelectionState() {
    const selected = getSelectedTransactionIds();
    const btn = document.getElementById('bulkDeleteBtn');
    if (btn) btn.disabled = selected.length === 0;
}

async function deleteSelectedTransactions() {
    const ids = getSelectedTransactionIds();
    if (ids.length === 0) return;
    if (!confirm(`–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (${ids.length} —à—Ç.)? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`)) return;
    try {
        // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (Supabase REST –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ id —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–¥–µ—Å—å)
        for (const id of ids) {
            const response = await fetch(`/api/transactions?admin=true&id=${id}`, {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' }
            });
            if (!response.ok) {
                const text = await response.text();
                throw new Error(`ID ${id}: ${text}`);
            }
        }
        showNotification(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${ids.length}`, 'success');
        loadTransactions();
    } catch (e) {
        console.error('Bulk delete error:', e);
        showNotification('‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è: ' + e.message, 'error');
    }
}

// ======================== –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò ========================

function showAddTransactionModal() {
    document.getElementById('addTransactionModal').style.display = 'block';
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    document.getElementById('addTransactionForm').reset();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ö–µ—à –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
    const hashField = document.getElementById('txHash');
    if (!hashField.value) {
        hashField.placeholder = '–ë—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏';
    }
}

async function addTransaction() {
    const form = document.getElementById('addTransactionForm');
    const formData = new FormData(form);
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    const transactionData = {
        user_telegram_id: parseInt(formData.get('txTelegramId')),
        transaction_type: formData.get('txType'),
        crypto_currency: formData.get('txCurrency'),
        blockchain_network: formData.get('txNetwork'),
        withdraw_amount: parseFloat(formData.get('txAmount')),
        network_fee: parseFloat(formData.get('txFee')) || 0,
        recipient_address: formData.get('txAddress'),
        blockchain_hash: formData.get('txHash') || generateTransactionHash(),
        transaction_status: formData.get('txStatus'),
        user_comment: formData.get('txComment') || `–ê–¥–º–∏–Ω—Å–∫–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è (${formData.get('txType')})`
    };
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!transactionData.user_telegram_id || !transactionData.transaction_type || 
        !transactionData.crypto_currency || !transactionData.blockchain_network ||
        !transactionData.withdraw_amount || !transactionData.recipient_address) {
        showNotification('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
        return;
    }
    
    if (transactionData.withdraw_amount <= 0) {
        showNotification('‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0', 'error');
        return;
    }
    
    try {
        // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ wallet_transactions
        const txResponse = await fetch('/api/transactions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ 
                action: 'add_admin_transaction',
                ...transactionData 
            })
        });
        
        if (!txResponse.ok) {
            throw new Error(`HTTP error! status: ${txResponse.status}`);
        }
        
        const txResult = await txResponse.json();
        
        if (!txResult.success) {
            throw new Error(txResult.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "completed"
        let balanceUpdated = false;
        if (transactionData.transaction_status === 'completed') {
            const balanceChange = transactionData.transaction_type === 'deposit' 
                ? transactionData.withdraw_amount 
                : -transactionData.withdraw_amount;
                
            const balanceResponse = await fetch('/api/admin/balances', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    action: 'update_balance',
                    telegram_id: transactionData.user_telegram_id,
                    currency: transactionData.crypto_currency.toLowerCase(),
                    amount_change: balanceChange,
                    reason: `admin_transaction_${transactionData.transaction_type}`
                })
            });
            
            if (balanceResponse.ok) {
                balanceUpdated = true;
            } else {
                console.warn('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –±–∞–ª–∞–Ω—Å –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω');
            }
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        closeModal('addTransactionModal');
        
        let statusMessage = '';
        if (transactionData.transaction_status === 'completed') {
            statusMessage = balanceUpdated ? ' (–±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω)' : ' (–±–∞–ª–∞–Ω—Å –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω)';
        } else if (transactionData.transaction_status === 'pending') {
            statusMessage = ' (–≤ –æ–∂–∏–¥–∞–Ω–∏–∏, –±–∞–ª–∞–Ω—Å –Ω–µ –∏–∑–º–µ–Ω–µ–Ω)';
        } else {
            statusMessage = ' (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –±–∞–ª–∞–Ω—Å –Ω–µ –∏–∑–º–µ–Ω–µ–Ω)';
        }
        
        showNotification(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞! –°—Ç–∞—Ç—É—Å: ${transactionData.transaction_status}${statusMessage}`, 'success');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        loadTransactions();
        if (currentTab === 'balances') {
            loadBalances();
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ' + error.message, 'error');
    }
}

function generateTransactionHash() {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Å–µ–≤–¥–æ-—Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = 'admin_';
    for (let i = 0; i < 32; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
}

// ======================== –ù–ê–°–¢–†–û–ô–ö–ò –ö–û–ú–ò–°–°–ò–ô ========================
async function loadSettings() {
    try {
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if (!document.querySelector('#settings-tab.active')) {
            console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
            showTab('settings');
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        const resp = await fetch('/api/admin/settings');
        const data = await resp.json();
        console.log('üìã –û—Ç–≤–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫:', data);
        if (!resp.ok || !data.success) throw new Error(data.error || '–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞');
        
        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞: –º–∞—Å—Å–∏–≤ withdraw_fees {network,fee}
        // –∏–ª–∏ app_settings {key,value}
        const map = {};
        (data.settings || []).forEach(r => {
            if (r.network !== undefined) map[r.network] = r.fee;
            if (r.key !== undefined) map[r.key] = r.value;
        });
        console.log('üí∞ –ö–∞—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', map);
        
        const tonFee = parseFloat(map['ton'] ?? map['fee_ton'] ?? 0);
        const tronFee = parseFloat(map['tron'] ?? map['fee_tron'] ?? 0);
        const solFee = parseFloat(map['sol'] ?? map['fee_sol'] ?? 0);
        const ethFee = parseFloat(map['eth'] ?? map['fee_eth'] ?? 0);
        const bnbFee = parseFloat(map['bnb'] ?? map['fee_bnb'] ?? 0);
        
        console.log('üî¢ –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∏–Ω–ø—É—Ç–æ–≤:', { tonFee, tronFee, solFee, ethFee, bnbFee });
        
        // –ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
        const setWithRetry = async (id, value, retries = 3) => {
            for (let i = 0; i < retries; i++) {
                await new Promise(resolve => setTimeout(resolve, 50 * i));
                setInputValue(id, value);
                const el = document.getElementById(id);
                if (el && el.value == value) {
                    console.log(`‚úÖ ${id} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${value}`);
                    break;
                }
                console.log(`‚ö†Ô∏è ${id} –ø–æ–ø—ã—Ç–∫–∞ ${i + 1}/${retries}`);
            }
        };
        
        await Promise.all([
            setWithRetry('fee-ton', tonFee),
            setWithRetry('fee-tron', tronFee),
            setWithRetry('fee-sol', solFee),
            setWithRetry('fee-eth', ethFee),
            setWithRetry('fee-bnb', bnbFee)
        ]);
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ DOM
        setTimeout(() => {
            ['fee-ton', 'fee-tron', 'fee-sol', 'fee-eth', 'fee-bnb'].forEach(id => {
                const el = document.getElementById(id);
                if (el) {
                    console.log(`üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ${id}: value="${el.value}"`);
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
                    el.style.display = 'none';
                    el.offsetHeight; // force reflow
                    el.style.display = '';
                }
            });
        }, 200);
        
        showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'success');
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', e);
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'error');
    }
}

async function saveSettings() {
    try {
        // –ü–µ—Ä–µ–¥–∞—ë–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ withdraw_fees
        const settings = [
            { network: 'ton', fee: getInputNumber('fee-ton') },
            { network: 'tron', fee: getInputNumber('fee-tron') },
            { network: 'sol', fee: getInputNumber('fee-sol') },
            { network: 'eth', fee: getInputNumber('fee-eth') },
            { network: 'bnb', fee: getInputNumber('fee-bnb') },
        ];
        const resp = await fetch('/api/admin/settings', {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ settings })
        });
        const data = await resp.json();
        if (!resp.ok || !data.success) throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', e);
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'error');
    }
}

function setInputValue(id, value) {
    const el = document.getElementById(id);
    if (!el) {
        console.warn('settings: input not found', id);
        return false;
    }
    const num = isNaN(value) ? 0 : Number(value);
    console.log(`üéØ Setting ${id} = ${num} (original: ${value})`);
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º
    if (el.offsetParent === null && el.style.display !== 'none') {
        console.warn(`‚ö†Ô∏è ${id} element might be hidden`);
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        el.style.visibility = 'visible';
        el.style.opacity = '1';
    }
    
    // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è
    el.value = num.toString();
    el.setAttribute('value', num.toString());
    if ('valueAsNumber' in el) {
        el.valueAsNumber = num;
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    el.defaultValue = num.toString();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å
    console.log(`‚úÖ ${id} after set: value="${el.value}", valueAsNumber=${el.valueAsNumber}`);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ç—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    el.dispatchEvent(new Event('input', { bubbles: true }));
    el.dispatchEvent(new Event('change', { bubbles: true }));
    el.dispatchEvent(new Event('blur', { bubbles: true }));
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π reflow
    el.focus();
    el.blur();
    
    return el.value == num;
}

function getInputNumber(id) {
    const el = document.getElementById(id);
    if (!el) return 0;
    const v = parseFloat(el.value);
    return isNaN(v) ? 0 : v;
}

// upsertSetting –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è /api/admin/settings
