// Telegram Web App API
let tg = window.Telegram.WebApp;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentNetwork = 'ton';
let currentBalance = 0;
let networkFees = { ton: 0, tron: 0, sol: 0, eth: 0, bnb: 0 }; // –∫–æ–º–∏—Å—Å–∏–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏ (–≤ –Ω–∞—Ç–∏–≤–Ω–æ–π –º–æ–Ω–µ—Ç–µ)
let networkPricesUsd = { ton: 0, tron: 0, sol: 0, eth: 0, bnb: 0 }; // —Ü–µ–Ω—ã –º–æ–Ω–µ—Ç –∏–∑ –±–∞–ª–∞–Ω—Å–∞
const NETWORK_SYMBOLS = { ton: 'TON', tron: 'TRX', sol: 'SOL', eth: 'ETH', bnb: 'BNB' };

// –î–∞–Ω–Ω—ã–µ –æ —Å–µ—Ç—è—Ö
const NETWORK_DATA = {
    ton: {
        name: 'The Open Network',
        type: '–°–µ—Ç—å',
        fee: '0 TON',
        icon: 'toncoin.png',
        iconClass: 'ton-icon',
        feeAmount: 0,
        feeCurrency: 'TON'
    },
    tron: {
        name: 'Tron',
        type: '–°–µ—Ç—å',
        fee: '0 TRX',
        icon: 'tron.png',
        iconClass: 'trx-icon',
        feeAmount: 0,
        feeCurrency: 'TRX'
    },
    sol: {
        name: 'Solana',
        type: '–°–µ—Ç—å',
        fee: '0 SOL',
        icon: 'solana.png',
        iconClass: 'sol-icon',
        feeAmount: 0,
        feeCurrency: 'SOL'
    },
    eth: {
        name: 'Ethereum',
        type: '–°–µ—Ç—å',
        fee: '0 ETH',
        icon: 'ethereum.svg',
        iconClass: 'eth-icon',
        feeAmount: 0,
        feeCurrency: 'ETH'
    },
    bnb: {
        name: 'BNB Smart Chain',
        type: '–°–µ—Ç—å',
        fee: '0 BNB',
        icon: 'bnb.webp',
        iconClass: 'bnb-icon',
        feeAmount: 0,
        feeCurrency: 'BNB'
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOMContentLoaded: usdt-withdraw-script.js –∑–∞–≥—Ä—É–∂–µ–Ω');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Web App
    if (tg && tg.ready) {
        tg.ready();
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
    initTheme();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    initEventHandlers();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∏—Å—Å–∏–π –∏ –±–∞–ª–∞–Ω—Å/—Ü–µ–Ω—ã
    Promise.all([fetchAndApplySettings(), loadUserBalance()]).then(() => {
        // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –∏ UI
        updateNetworkDataFromState();
        updateNetworkDisplay(getCurrentNetworkInfo());
        updateNetworkOptionsFees();
        updateFeeInfo();
    }).catch(() => {
        updateFeeInfo();
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ç—å –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    initNetworkFromUrl();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º placeholder –¥–ª—è –∞–¥—Ä–µ—Å–∞
    updateAddressPlaceholder();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∏—Å—Å–∏–∏
    // (–≤—ã–∑–æ–≤ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    initAppRestrictions();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    initBackButton();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∏—Å—Å–∏–π –∏–∑ API –∞–¥–º–∏–Ω–∫–∏
async function fetchAndApplySettings() {
    try {
        const resp = await fetch('/api/admin/settings');
        const data = await resp.json();
        if (resp.ok && data && data.success && Array.isArray(data.settings)) {
            const map = {};
            data.settings.forEach(s => {
                if (s && typeof s.network === 'string') {
                    const n = s.network.toLowerCase();
                    const feeNum = parseFloat(s.fee) || 0;
                    map[n] = feeNum;
                }
            });
            networkFees = { ...networkFees, ...map };
            updateNetworkDataFromState();
        }
    } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫', e);
    }
}

function updateNetworkDataFromState() {
    Object.keys(NETWORK_DATA).forEach(n => {
        const fee = parseFloat(networkFees[n] || 0) || 0;
        NETWORK_DATA[n].feeAmount = fee;
        NETWORK_DATA[n].fee = `${fee} ${NETWORK_SYMBOLS[n]}`;
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
function initTheme() {
    document.documentElement.setAttribute('data-theme', 'dark');
    updateIcons();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
function updateIcons() {
    const pasteLight = document.querySelector('.paste-light');
    const pasteDark = document.querySelector('.paste-dark');
    
    if (pasteLight && pasteDark) {
        pasteLight.style.display = 'none';
        pasteDark.style.display = 'block';
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function initEventHandlers() {
    // –í—ã–±–æ—Ä —Å–µ—Ç–∏
    const networkSelector = document.getElementById('networkSelector');
    networkSelector.addEventListener('click', showNetworkModal);
    
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.getElementById('networkModal');
    const modalClose = document.getElementById('modalClose');
    modalClose.addEventListener('click', hideNetworkModal);
    
    // –ö–ª–∏–∫ –ø–æ overlay –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            hideNetworkModal();
        }
    });
    
    // –í—ã–±–æ—Ä —Å–µ—Ç–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    const networkOptions = document.querySelectorAll('.network-option');
    networkOptions.forEach(option => {
        option.addEventListener('click', function() {
            const network = this.dataset.network;
            selectNetwork(network);
            hideNetworkModal();
        });
    });
    
    // –ö–Ω–æ–ø–∫–∞ "–í—Å—Ç–∞–≤–∏—Ç—å"
    const pasteBtn = document.getElementById('pasteBtn');
    pasteBtn.addEventListener('click', pasteAddress);
    
    // –ö–Ω–æ–ø–∫–∞ "–ú–∞–∫—Å"
    const maxBtn = document.getElementById('maxBtn');
    maxBtn.addEventListener('click', setMaxAmount);
    
    // –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    const addCommentBtn = document.getElementById('addCommentBtn');
    addCommentBtn.addEventListener('click', toggleComment);
    
    // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    const continueBtn = document.getElementById('continueBtn');
    continueBtn.addEventListener('click', processContinue);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
    const addressInput = document.getElementById('addressInput');
    const amountInput = document.getElementById('amountInput');
    
    // –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –∏ —Å—É–º–º—ã
    addressInput.addEventListener('input', function() {
        validateForm();
    });
    amountInput.addEventListener('input', function() {
        validateForm();
        updateFeeInfo(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∏—Å—Å–∏–∏
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏
function showNetworkModal() {
    const modal = document.getElementById('networkModal');
    modal.style.display = 'flex';
    document.body.style.overflow = 'hidden';
}

// –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏
function hideNetworkModal() {
    const modal = document.getElementById('networkModal');
    modal.style.display = 'none';
    document.body.style.overflow = 'auto';
}

// –í—ã–±–æ—Ä —Å–µ—Ç–∏
function selectNetwork(network) {
    currentNetwork = network;
    
    const data = NETWORK_DATA[network];
    if (data) {
        updateNetworkDisplay(data);
        updateAddressPlaceholder(); // –û–±–Ω–æ–≤–ª—è–µ–º placeholder –¥–ª—è –∞–¥—Ä–µ—Å–∞
        updateFeeInfo(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∏—Å—Å–∏–∏
        console.log(`üåê –°–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${data.name} (${network})`);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏
function updateNetworkDisplay(data) {
    const networkSelector = document.getElementById('networkSelector');
    
    networkSelector.innerHTML = `
        <div class="network-left">
            <div class="network-icon ${data.iconClass}">
                <img src="${data.icon}" alt="${data.name}" class="network-logo">
            </div>
            <div class="network-info">
                <div class="network-name">${data.name}</div>
                <div class="network-type">${data.type}</div>
            </div>
        </div>
        <div class="network-right">
            <div class="network-fee">${data.fee}</div>
            <div class="network-fee-label">–ö–æ–º–∏—Å—Å–∏—è</div>
        </div>
    `;
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è HTML
    networkSelector.addEventListener('click', showNetworkModal);
}

function updateNetworkOptionsFees() {
    const options = document.querySelectorAll('.network-option');
    options.forEach(opt => {
        const net = opt.getAttribute('data-network');
        const feeInfo = opt.querySelector('.network-fee-info');
        if (net && feeInfo && NETWORK_DATA[net]) {
            feeInfo.textContent = NETWORK_DATA[net].fee;
        }
    });
}

// –í—Å—Ç–∞–≤–∫–∞ –∞–¥—Ä–µ—Å–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
async function pasteAddress() {
    try {
        const text = await navigator.clipboard.readText();
        document.getElementById('addressInput').value = text;
        validateForm();
        
        if (tg && tg.showAlert) {
            tg.showAlert('–ê–¥—Ä–µ—Å –≤—Å—Ç–∞–≤–ª–µ–Ω');
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞:', err);
        if (tg && tg.showAlert) {
            tg.showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±—É—Ñ–µ—Ä—É –æ–±–º–µ–Ω–∞');
        }
    }
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
function setMaxAmount() {
    const amountInput = document.getElementById('amountInput');
    const feeNative = parseFloat(NETWORK_DATA[currentNetwork].feeAmount || 0) || 0;
    const feeUsd = feeNative * getNetworkUsdPrice(currentNetwork);
    const maxNet = Math.max(0, currentBalance - (feeUsd || 0));
    amountInput.value = maxNet.toFixed(8);
    validateForm();
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–º–∏—Å—Å–∏–∏ —Å–µ—Ç–∏
function getCurrentNetworkFee() {
    const networkData = NETWORK_DATA[currentNetwork];
    return networkData ? networkData.fee : '0';
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π —Å–µ—Ç–∏
function getCurrentNetworkInfo() {
    return NETWORK_DATA[currentNetwork] || NETWORK_DATA.ton;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ç–∏
function validateAddressForNetwork(address, network) {
    const patterns = {
        ton: /^EQ[a-zA-Z0-9]{48}$/,
        tron: /^T[a-zA-Z0-9]{33}$/,
        sol: /^[1-9A-HJ-NP-Za-km-z]{32,44}$/,
        eth: /^0x[a-fA-F0-9]{40}$/,
        bnb: /^0x[a-fA-F0-9]{40}$/
    };
    
    const pattern = patterns[network];
    if (!pattern) return true; // –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    
    return pattern.test(address);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ placeholder –¥–ª—è –∞–¥—Ä–µ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ç–∏
function updateAddressPlaceholder() {
    const addressInput = document.getElementById('addressInput');
    const networkInfo = getCurrentNetworkInfo();
    
    const placeholders = {
        ton: 'EQD4FPq-PRDieyQKkizFTRtSD...',
        tron: 'TR7NHqjeKQxGTCi8q8ZY4p...',
        sol: 'EPjFWdd5AufqSSqeM2qN1x...',
        eth: '0xdAC17F958D2ee523a2206206...',
        bnb: '0x55d398326f99059fF775485246...'
    };
    
    addressInput.placeholder = placeholders[currentNetwork] || '–ê–¥—Ä–µ—Å';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∏—Å—Å–∏–∏
function updateFeeInfo() {
    const networkFeeElement = document.getElementById('networkFee');
    const totalAmountElement = document.getElementById('totalAmount');
    
    if (networkFeeElement && totalAmountElement) {
        const networkInfo = getCurrentNetworkInfo();
        const amount = parseFloat(document.getElementById('amountInput').value) || 0;

        // –∫–æ–º–∏—Å—Å–∏—è —Å–µ—Ç–∏ –≤ –Ω–∞—Ç–∏–≤–Ω–æ–π –º–æ–Ω–µ—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä TON)
        const feeNative = parseFloat(networkInfo.feeAmount || 0) || 0;
        // —Ü–µ–Ω–∞ –Ω–∞—Ç–∏–≤–Ω–æ–π –º–æ–Ω–µ—Ç—ã –≤ USD ‚Äî –≤–æ–∑—å–º–µ–º –∏–∑ –±–∞–ª–∞–Ω—Å–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å). –î–ª—è USDT –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ü–µ–Ω—ã TON –∏–∑ index (–±–∞–ª–∞–Ω—Å—ã)
        const priceUsd = getNetworkUsdPrice(currentNetwork);

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–∏—Å—Å–∏—é –≤ USD
        const feeUsd = feeNative * priceUsd;
        // –¢—Ä–µ–±—É–µ–º–∞—è —Å—É–º–º–∞ USDT —Å —É—á–µ—Ç–æ–º USD-–∫–æ–º–∏—Å—Å–∏–∏
        const requiredUsdt = amount + feeUsd; // USDT ~ $1
        
        networkFeeElement.textContent = `${feeNative} ${NETWORK_SYMBOLS[currentNetwork]}`;
        totalAmountElement.textContent = `${requiredUsdt.toFixed(8)} USDT`;
    }
}

function getNetworkUsdPrice(network) {
    // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ü–µ–Ω—ã –∏–∑ user balance –∑–∞–≥—Ä—É–∑–∫–∏
    // –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ ‚Äî –≤–µ—Ä–Ω–µ–º 0 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    switch (network) {
        case 'ton': return parseFloat(window.__balance_prices?.ton_price || 0) || 0;
        case 'tron': return parseFloat(window.__balance_prices?.trx_price || 0) || 0;
        case 'sol': return parseFloat(window.__balance_prices?.sol_price || 0) || 0;
        case 'eth': return parseFloat(window.__balance_prices?.eth_price || 0) || 0;
        case 'bnb': return 0; // –≤ –±–∞–ª–∞–Ω—Å–∞—Ö –Ω–µ—Ç —Ü–µ–Ω—ã BNB, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–∑–∂–µ
        default: return 0;
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
function toggleComment() {
    const commentContainer = document.getElementById('commentContainer');
    const addCommentBtn = document.getElementById('addCommentBtn');
    
    if (commentContainer.style.display === 'none') {
        commentContainer.style.display = 'block';
        addCommentBtn.textContent = '- –£–±—Ä–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π';
    } else {
        commentContainer.style.display = 'none';
        addCommentBtn.textContent = '+ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π';
        document.getElementById('commentInput').value = '';
    }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
function validateForm() {
    const addressInput = document.getElementById('addressInput');
    const amountInput = document.getElementById('amountInput');
    const continueBtn = document.getElementById('continueBtn');
    
    const hasAddress = addressInput.value.trim().length > 0;
    const hasAmount = amountInput.value && parseFloat(amountInput.value) > 0;
    const netAmount = parseFloat(amountInput.value) || 0;
    const feeUsd = (NETWORK_DATA[currentNetwork].feeAmount || 0) * getNetworkUsdPrice(currentNetwork);
    const requiredUsdt = netAmount + (feeUsd || 0);
    const isValidAmount = requiredUsdt <= currentBalance && netAmount > 0;
    
    const isValid = hasAddress && hasAmount && isValidAmount;
    
    continueBtn.disabled = !isValid;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
    if (amountInput.value && !isValidAmount) {
        amountInput.style.borderColor = '#ff4444';
    } else {
        amountInput.style.borderColor = '';
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
function processContinue() {
    // –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞
    handleWithdraw();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserBalance() {
    try {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å USDT...');
        
        // –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const telegramId = tg?.initDataUnsafe?.user?.id || 'demo_user';
        
        const response = await fetch(`/api/admin/balances?telegram_id=${telegramId}`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.success && data.balance) {
            currentBalance = data.balance.usdt_amount ?? 0;
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–æ–º–∏—Å—Å–∏–π –≤ USD
            window.__balance_prices = {
                ton_price: data.balance.ton_price,
                trx_price: data.balance.trx_price,
                sol_price: data.balance.sol_price,
                eth_price: data.balance.eth_price
            };
            updateBalanceDisplay();
        } else {
            currentBalance = 0;
            updateBalanceDisplay();
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
        currentBalance = 0;
        updateBalanceDisplay();
    }
    // –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞
    validateForm();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
function updateBalanceDisplay() {
    const balanceAmount = document.querySelector('.balance-amount');
    const balanceUsd = document.querySelector('.balance-usd');
    
    if (balanceAmount) {
        balanceAmount.textContent = `${currentBalance.toFixed(8)} USDT`;
    }
    
    if (balanceUsd) {
        const usdValue = (currentBalance * 1.0).toFixed(3); // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å USDT = $1
        balanceUsd.textContent = `$${usdValue}`;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ç–∏ –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
function initNetworkFromUrl() {
    const urlParams = new URLSearchParams(window.location.search);
    const networkParam = urlParams.get('network');
    
    if (networkParam) {
        selectNetwork(networkParam);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
function initBackButton() {
    if (tg && tg.BackButton) {
        tg.BackButton.show();
        tg.BackButton.onClick(() => {
            window.location.href = 'withdraw-usdt-chain.html';
        });
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initAppRestrictions() {
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é (–ø—Ä–∞–≤—ã–π –∫–ª–∏–∫)
    document.addEventListener('contextmenu', function(e) {
        e.preventDefault();
        return false;
    });
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    document.addEventListener('selectstart', function(e) {
        e.preventDefault();
        return false;
    });
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    document.addEventListener('dragstart', function(e) {
        e.preventDefault();
        return false;
    });
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∑—É–º –∂–µ—Å—Ç–∞–º–∏
    document.addEventListener('gesturestart', function(e) {
        e.preventDefault();
        return false;
    });
    
    document.addEventListener('gesturechange', function(e) {
        e.preventDefault();
        return false;
    });
    
    document.addEventListener('gestureend', function(e) {
        e.preventDefault();
        return false;
    });
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∑—É–º –∫–æ–ª–µ—Å–∏–∫–æ–º –º—ã—à–∏
    document.addEventListener('wheel', function(e) {
        if (e.ctrlKey) {
            e.preventDefault();
            return false;
        }
    }, { passive: false });
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∑—É–º –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    document.addEventListener('touchstart', function(e) {
        if (e.touches.length > 1) {
            e.preventDefault();
            return false;
        }
    }, { passive: false });
    
    document.addEventListener('touchmove', function(e) {
        if (e.touches.length > 1) {
            e.preventDefault();
            return false;
        }
    }, { passive: false });
}

// ==================== –û–ë–†–ê–ë–û–¢–ö–ê –í–´–í–û–î–ê USDT ====================

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
async function handleWithdraw() {
    try {
        console.log('üí∏ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≤–æ–¥–∞ USDT...');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        const address = document.getElementById('addressInput').value.trim();
        const amount = parseFloat(document.getElementById('amountInput').value);
        const comment = document.getElementById('commentInput').value.trim();
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!address) {
            alert('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è');
            return;
        }
        
        if (!amount || amount <= 0) {
            alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
            return;
        }
        
        if (amount > currentBalance) {
            alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: ${currentBalance} USDT`);
            return;
        }
        
        if (amount < 1) {
            alert('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 1 USDT');
            return;
        }
        
        // –ê–¥—Ä–µ—Å –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —à–∞–±–ª–æ–Ω–∞
        
        // –ü–æ–ª—É—á–∞–µ–º Telegram ID
        let telegramId = currentTelegramId;
        if (!telegramId) {
            if (tg && tg.initDataUnsafe && tg.initDataUnsafe.user) {
                telegramId = tg.initDataUnsafe.user.id;
            } else {
                telegramId = 123456789; // –¢–µ—Å—Ç–æ–≤—ã–π ID
            }
        }
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        const continueBtn = document.getElementById('continueBtn');
        const originalText = continueBtn.textContent;
        continueBtn.disabled = true;
        continueBtn.textContent = '–û–±—Ä–∞–±–æ—Ç–∫–∞...';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –ø–æ —Å–µ—Ç–∏
        const currentNetworkInfo = getCurrentNetworkInfo();
        const fee = currentNetworkInfo.feeAmount || 0; // –≤ –Ω–∞—Ç–∏–≤–Ω–æ–π –º–æ–Ω–µ—Ç–µ —Å–µ—Ç–∏
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—É–º–º—É USDT —Å —É—á–µ—Ç–æ–º USD-—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏ —Å–µ—Ç–∏
        const feeUsd = fee * getNetworkUsdPrice(currentNetwork);
        const requiredUsdt = amount + feeUsd;
        if (requiredUsdt > currentBalance) {
            alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ —Å–µ—Ç–∏. –ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º ${requiredUsdt.toFixed(8)} USDT`);
            return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const response = await fetch('/api/transactions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                telegram_id: telegramId,
                type: 'withdraw',
                crypto: 'USDT',
                network: currentNetwork,
                amount: requiredUsdt,
                fee: feeUsd,
                address: address,
                comment: comment || null
            })
        });
        
        const result = await response.json();
        
        if (response.ok && result.success) {
            console.log('‚úÖ –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ê:', result);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            currentBalance = result.new_balance;
            updateBalanceDisplay();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ —Å–µ—Ç–∏)
            alert(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ –≤—ã–≤–æ–¥ ${requiredUsdt.toFixed(8)} USDT (–≤–∫–ª. –∫–æ–º–∏—Å—Å–∏—é —Å–µ—Ç–∏) —Å–æ–∑–¥–∞–Ω–∞!\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${result.new_balance} USDT\n–°—Ç–∞—Ç—É—Å: –í –æ–±—Ä–∞–±–æ—Ç–∫–µ`);
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            document.getElementById('addressInput').value = '';
            document.getElementById('amountInput').value = '';
            document.getElementById('commentInput').value = '';
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            setTimeout(() => {
                window.location.href = 'withdraw-usdt-chain.html';
            }, 2000);
            
        } else {
            console.error('‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:', result);
            alert(`–û—à–∏–±–∫–∞: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
        
    } catch (error) {
        console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í–´–í–û–î–ê:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    } finally {
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        const continueBtn = document.getElementById('continueBtn');
        continueBtn.disabled = false;
        continueBtn.textContent = '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å';
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è telegram ID
let currentTelegramId = null;
