// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞–±–æ—Ä–æ–≤ –∞–¥—Ä–µ—Å–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const fs = require('fs');
const { createAddressSet } = require('./api/users.js');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ —Å –∞–¥—Ä–µ—Å–∞–º–∏
function parseAddressLine(line) {
    const parts = line.split(',').map(part => part.trim());
    
    if (parts.length < 2) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä–æ–∫–µ');
    }
    
    const name = parts[0];
    if (!name) {
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è –Ω–∞–±–æ—Ä–∞');
    }
    
    const addresses = {
        ton: null,
        tron: null,
        sol: null,
        eth: null,
        bnb: null
    };
    
    // –ü–∞—Ä—Å–∏–º –∞–¥—Ä–µ—Å–∞
    for (let i = 1; i < parts.length; i++) {
        const part = parts[i];
        const colonIndex = part.indexOf(':');
        
        if (colonIndex > 0) {
            const network = part.substring(0, colonIndex).toLowerCase();
            const address = part.substring(colonIndex + 1);
            
            if (addresses.hasOwnProperty(network) && address) {
                addresses[network] = address;
            }
        }
    }
    
    return { name, addresses };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
async function importFromFile(filePath) {
    try {
        console.log(`üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ${filePath}`);
        
        if (!fs.existsSync(filePath)) {
            throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
        }
        
        const content = fs.readFileSync(filePath, 'utf8');
        const lines = content.split('\n').filter(line => line.trim());
        
        console.log(`üìù –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: ${lines.length}`);
        
        const results = {
            success: [],
            errors: []
        };
        
        for (let i = 0; i < lines.length; i++) {
            const lineNumber = i + 1;
            
            try {
                const parsed = parseAddressLine(lines[i]);
                
                // –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä –∞–¥—Ä–µ—Å–æ–≤
                await createAddressSet(parsed.name, parsed.addresses);
                
                results.success.push({
                    line: lineNumber,
                    name: parsed.name,
                    addresses: parsed.addresses
                });
                
                console.log(`‚úÖ –°—Ç—Ä–æ–∫–∞ ${lineNumber}: ${parsed.name} - —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω`);
                
            } catch (error) {
                results.errors.push({
                    line: lineNumber,
                    error: error.message,
                    content: lines[i]
                });
                
                console.error(`‚ùå –°—Ç—Ä–æ–∫–∞ ${lineNumber}: ${error.message}`);
            }
        }
        
        // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞:');
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${results.success.length}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${results.errors.length}`);
        
        if (results.errors.length > 0) {
            console.log('\nüìã –û—à–∏–±–∫–∏:');
            results.errors.forEach(error => {
                console.log(`   –°—Ç—Ä–æ–∫–∞ ${error.line}: ${error.error}`);
                console.log(`   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ${error.content}`);
            });
        }
        
        return results;
        
    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error.message);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫
async function importFromArray(lines) {
    console.log(`üìù –ò–º–ø–æ—Ä—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞: ${lines.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    
    const results = {
        success: [],
        errors: []
    };
    
    for (let i = 0; i < lines.length; i++) {
        const lineNumber = i + 1;
        
        try {
            if (!lines[i].trim()) {
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            }
            
            const parsed = parseAddressLine(lines[i]);
            
            // –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä –∞–¥—Ä–µ—Å–æ–≤
            await createAddressSet(parsed.name, parsed.addresses);
            
            results.success.push({
                line: lineNumber,
                name: parsed.name,
                addresses: parsed.addresses
            });
            
            console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç ${lineNumber}: ${parsed.name} - —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω`);
            
        } catch (error) {
            results.errors.push({
                line: lineNumber,
                error: error.message,
                content: lines[i]
            });
            
            console.error(`‚ùå –≠–ª–µ–º–µ–Ω—Ç ${lineNumber}: ${error.message}`);
        }
    }
    
    return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
function createExampleFile(filePath = 'addresses-example.txt') {
    const exampleContent = `user1,ton:EQD4FPq-PRDieyQKkizFTRtSDyucUIqrj0v_zXJmqaDp6_01,tron:TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj61,sol:EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt11,eth:0xdAC17F958D2ee523a2206206994597C13D831ec1,bnb:0x55d398326f99059fF775485246999027B31979551
user2,ton:EQD4FPq-PRDieyQKkizFTRtSDyucUIqrj0v_zXJmqaDp6_02,tron:TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj62,sol:EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt12,eth:0xdAC17F958D2ee523a2206206994597C13D831ec2,bnb:0x55d398326f99059fF775485246999027B31979552
user3,ton:EQD4FPq-PRDieyQKkizFTRtSDyucUIqrj0v_zXJmqaDp6_03,tron:TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj63,sol:EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt13,eth:0xdAC17F958D2ee523a2206206994597C13D831ec3,bnb:0x55d398326f99059fF775485246999027B31979553`;
    
    fs.writeFileSync(filePath, exampleContent);
    console.log(`üìÑ –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞: ${filePath}`);
    
    return filePath;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
function validateAddressFormat(network, address) {
    if (!address) return false;
    
    switch (network) {
        case 'ton':
            return address.startsWith('EQ') && address.length === 48;
        case 'tron':
            return address.startsWith('T') && address.length === 34;
        case 'sol':
            return address.length === 44;
        case 'eth':
        case 'bnb':
            return address.startsWith('0x') && address.length === 42;
        default:
            return false;
    }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–æ–≤
function validateAddressSet(addressSet) {
    const errors = [];
    
    if (!addressSet.name || !addressSet.name.trim()) {
        errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è –Ω–∞–±–æ—Ä–∞');
    }
    
    const networks = ['ton', 'tron', 'sol', 'eth', 'bnb'];
    let hasAnyAddress = false;
    
    networks.forEach(network => {
        const address = addressSet.addresses[network];
        if (address) {
            hasAnyAddress = true;
            if (!validateAddressFormat(network, address)) {
                errors.push(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ ${network.toUpperCase()}: ${address}`);
            }
        }
    });
    
    if (!hasAnyAddress) {
        errors.push('–ù–µ —É–∫–∞–∑–∞–Ω –Ω–∏ –æ–¥–∏–Ω –∞–¥—Ä–µ—Å');
    }
    
    return errors;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
function validateFile(filePath) {
    try {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞: ${filePath}`);
        
        if (!fs.existsSync(filePath)) {
            throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
        }
        
        const content = fs.readFileSync(filePath, 'utf8');
        const lines = content.split('\n').filter(line => line.trim());
        
        const validation = {
            totalLines: lines.length,
            validLines: 0,
            errors: []
        };
        
        for (let i = 0; i < lines.length; i++) {
            const lineNumber = i + 1;
            
            try {
                const parsed = parseAddressLine(lines[i]);
                const errors = validateAddressSet(parsed);
                
                if (errors.length === 0) {
                    validation.validLines++;
                } else {
                    validation.errors.push({
                        line: lineNumber,
                        errors: errors,
                        content: lines[i]
                    });
                }
                
            } catch (error) {
                validation.errors.push({
                    line: lineNumber,
                    errors: [error.message],
                    content: lines[i]
                });
            }
        }
        
        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:`);
        console.log(`   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${validation.totalLines}`);
        console.log(`   –í–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫: ${validation.validLines}`);
        console.log(`   –°—Ç—Ä–æ–∫ —Å –æ—à–∏–±–∫–∞–º–∏: ${validation.errors.length}`);
        
        if (validation.errors.length > 0) {
            console.log('\n‚ùå –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:');
            validation.errors.forEach(error => {
                console.log(`   –°—Ç—Ä–æ–∫–∞ ${error.line}:`);
                error.errors.forEach(err => console.log(`     - ${err}`));
            });
        }
        
        return validation;
        
    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞:', error.message);
        throw error;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
module.exports = {
    importFromFile,
    importFromArray,
    createExampleFile,
    validateFile,
    parseAddressLine,
    validateAddressSet,
    validateAddressFormat
};

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if (require.main === module) {
    const args = process.argv.slice(2);
    const command = args[0];
    const filePath = args[1];
    
    switch (command) {
        case 'import':
            if (!filePath) {
                console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: node import-addresses.js import addresses.txt');
                process.exit(1);
            }
            
            importFromFile(filePath)
                .then(results => {
                    console.log('\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
                    process.exit(results.errors.length === 0 ? 0 : 1);
                })
                .catch(error => {
                    console.error('üí• –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error.message);
                    process.exit(1);
                });
            break;
            
        case 'validate':
            if (!filePath) {
                console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: node import-addresses.js validate addresses.txt');
                process.exit(1);
            }
            
            try {
                const validation = validateFile(filePath);
                process.exit(validation.errors.length === 0 ? 0 : 1);
            } catch (error) {
                console.error('üí• –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error.message);
                process.exit(1);
            }
            break;
            
        case 'example':
            const examplePath = filePath || 'addresses-example.txt';
            createExampleFile(examplePath);
            console.log('üéâ –ü—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–æ–∑–¥–∞–Ω!');
            break;
            
        default:
            console.log(`
üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:

  –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞:
    node import-addresses.js example [–ø—É—Ç—å]

  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª:
    node import-addresses.js validate <–ø—É—Ç—å-–∫-—Ñ–∞–π–ª—É>

  –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å–∞:
    node import-addresses.js import <–ø—É—Ç—å-–∫-—Ñ–∞–π–ª—É>

üìù –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:
  –∏–º—è_–Ω–∞–±–æ—Ä–∞,ton:–∞–¥—Ä–µ—Å,tron:–∞–¥—Ä–µ—Å,sol:–∞–¥—Ä–µ—Å,eth:–∞–¥—Ä–µ—Å,bnb:–∞–¥—Ä–µ—Å

üîó –ü—Ä–∏–º–µ—Ä:
  user1,ton:EQD4FPq...,tron:TR7NHqj...,sol:EPjFWdd...,eth:0xdAC17F...,bnb:0x55d398...
            `);
            break;
    }
}
