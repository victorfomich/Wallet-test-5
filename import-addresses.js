import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase —Å service role key –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ —Å –∞–¥—Ä–µ—Å–∞–º–∏ –∏ –∫–ª—é—á–∞–º–∏
function parseAddressLineWithKeys(line) {
  const parts = line.split(', ');
  const username = parts[0];
  const addresses = {};
  
  for (let i = 1; i < parts.length; i++) {
    const part = parts[i];
    const match = part.match(/(\w+):\[([^\]]+)\]:\[([^\]]+)\]/);
    
    if (match) {
      const network = match[1];
      const address = match[2];
      const key = match[3];
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–ª—é—á–∞ –ø–æ —Å–µ—Ç–∏
      let keyType, mnemonic24, mnemonic12, privateKeyHex;
      
      if (network === 'ton') {
        keyType = 'mnemonic_24';
        mnemonic24 = key;
      } else if (network === 'sol') {
        keyType = 'mnemonic_12';
        mnemonic12 = key;
      } else {
        // tron, eth, bnb
        keyType = 'private_key_hex';
        privateKeyHex = key;
      }
      
      addresses[network] = {
        address,
        keyType,
        mnemonic24,
        mnemonic12,
        privateKeyHex
      };
    }
  }
  
  return { username, addresses };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–æ–≤
function validateAddress(network, address) {
  switch (network) {
    case 'ton':
      return address.startsWith('EQ') && address.length >= 48;
    case 'tron':
      return address.startsWith('T') && address.length === 34;
    case 'sol':
      return address.length >= 32 && address.length <= 44;
    case 'eth':
      return address.startsWith('0x') && address.length === 42;
    case 'bnb':
      return address.startsWith('0x') && address.length === 42;
    default:
      return true;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∞–¥—Ä–µ—Å–æ–≤ —Å –∫–ª—é—á–∞–º–∏ –≤ Supabase
async function importAddressesWithKeysToSupabase(addressesData) {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –∞–¥—Ä–µ—Å–æ–≤ —Å –∫–ª—é—á–∞–º–∏ –≤ Supabase...');
  
  let successCount = 0;
  let errorCount = 0;
  let stats = {
    mnemonic_24: 0,
    mnemonic_12: 0,
    private_key_hex: 0
  };
  
  for (const [username, addresses] of Object.entries(addressesData)) {
    console.log(`\nüìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${username}`);
    
    for (const [network, data] of Object.entries(addresses)) {
      try {
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å
        if (!validateAddress(network, data.address)) {
          console.warn(`‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –¥–ª—è ${network}: ${data.address}`);
          continue;
        }
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        const addressData = {
          network,
          address: data.address,
          name: `${network.toUpperCase()} Wallet`,
          standard: getStandard(network),
          icon: getIcon(network),
          color: getColor(network),
          key_type: data.keyType,
          mnemonic_24: data.mnemonic24 || null,
          mnemonic_12: data.mnemonic12 || null,
          private_key_hex: data.privateKeyHex || null,
          is_assigned: false
        };
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –≤ –±–∞–∑—É
        const { data: insertedAddress, error } = await supabase
          .from('address_pool')
          .insert([addressData])
          .select()
          .single();
        
        if (error) {
          if (error.code === '23505') { // –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            console.log(`‚ÑπÔ∏è  –ê–¥—Ä–µ—Å ${network} –¥–ª—è ${username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          } else {
            throw error;
          }
        } else {
          console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω ${network} –∞–¥—Ä–µ—Å –¥–ª—è ${username}`);
          successCount++;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          if (data.keyType === 'mnemonic_24') stats.mnemonic_24++;
          else if (data.keyType === 'mnemonic_12') stats.mnemonic_12++;
          else if (data.keyType === 'private_key_hex') stats.private_key_hex++;
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ ${network} –∞–¥—Ä–µ—Å–∞ –¥–ª—è ${username}:`, error.message);
        errorCount++;
      }
    }
  }
  
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞:');
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${successCount}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
  console.log(`üîë Mnemonic 24 —Å–ª–æ–≤–∞: ${stats.mnemonic_24}`);
  console.log(`üîë Mnemonic 12 —Å–ª–æ–≤: ${stats.mnemonic_12}`);
  console.log(`üîë Private Key Hex: ${stats.private_key_hex}`);
  
  return { successCount, errorCount, stats };
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getStandard(network) {
  const standards = {
    'ton': 'TON',
    'tron': 'TRC20',
    'sol': 'SPL',
    'eth': 'ERC20',
    'bnb': 'BEP20'
  };
  return standards[network] || 'Unknown';
}

function getIcon(network) {
  const icons = {
    'ton': 'toncoin.png',
    'tron': 'tron.png',
    'sol': 'solana.png',
    'eth': 'ethereum.svg',
    'bnb': 'bnb.webp'
  };
  return icons[network] || 'default.png';
}

function getColor(network) {
  const colors = {
    'ton': '#0088CC',
    'tron': '#FF0000',
    'sol': '#9945FF',
    'eth': '#627EEA',
    'bnb': '#F3BA2F'
  };
  return colors[network] || '#000000';
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const inputFile = process.argv[2] || 'addresses-with-keys.txt';
    
    if (!fs.existsSync(inputFile)) {
      console.error(`‚ùå –§–∞–π–ª ${inputFile} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
      console.log('üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª addresses-with-keys.txt —Å –≤–∞—à–∏–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏');
      process.exit(1);
    }
    
    console.log(`üìÅ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª: ${inputFile}`);
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    const fileContent = fs.readFileSync(inputFile, 'utf8');
    const lines = fileContent.split('\n').filter(line => line.trim());
    
    console.log(`üìù –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${lines.length}`);
    
    // –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    const addressesData = {};
    
    for (const line of lines) {
      if (line.trim()) {
        const parsed = parseAddressLineWithKeys(line.trim());
        if (parsed.username && Object.keys(parsed.addresses).length > 0) {
          addressesData[parsed.username] = parsed.addresses;
        }
      }
    }
    
    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${Object.keys(addressesData).length}`);
    
    if (Object.keys(addressesData).length === 0) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞!');
      console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü—Ä–∏–º–µ—Ä:');
      console.log('user1, ton:[EQD4...]:[word1 word2 ... word24], tron:[TR7N...]:[386923d5deff3a050e1d1701bff18966...]');
      process.exit(1);
    }
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ Supabase
    await importAddressesWithKeysToSupabase(addressesData);
    
    console.log('\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}
