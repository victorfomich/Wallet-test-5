import { supabaseRequest } from '../supabase.js';

// API –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞ –≤—ã–≤–æ–¥ –ø–æ —Å–µ—Ç—è–º –∏ –¥—Ä.)
// –¢–∞–±–ª–∏—Ü–∞ public.app_settings —Ö—Ä–∞–Ω–∏—Ç –ø–∞—Ä—ã key/value.
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á–∏: fee_ton, fee_tron, fee_sol, fee_eth, fee_bnb.

export default async function handler(req, res) {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, PATCH, DELETE, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  if (req.method === 'OPTIONS') return res.status(200).end();

  try {
    const { method } = req;
    if (method === 'GET') {
      console.log('üîç Settings API: Trying to read withdraw_fees...');
      // –ü—ã—Ç–∞–µ–º—Å—è —á–∏—Ç–∞—Ç—å –∏–∑ withdraw_fees, –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî fallback –Ω–∞ app_settings
      let settings;
      try {
        settings = await supabaseRequest('withdraw_fees', 'GET', null, { select: '*' });
        console.log('üìä withdraw_fees result:', settings);
      } catch (err) {
        console.error('‚ùå withdraw_fees error:', err);
        settings = null;
      }
      
      if (!settings || settings.length === 0) {
        console.log('‚ö†Ô∏è withdraw_fees empty, trying app_settings fallback...');
        const rows = await supabaseRequest('app_settings', 'GET', null, { select: '*' });
        console.log('üìä app_settings result:', rows);
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–∞—Ä—ã key/value –≤ —Ñ–æ—Ä–º–∞—Ç network/fee, –µ—Å–ª–∏ –∫–ª—é—á–∏ –ø–æ–¥—Ö–æ–¥—è—Ç
        const map = {};
        (rows || []).forEach(r => { map[r.key] = r.value; });
        settings = [
          { network: 'ton', fee: map['fee_ton'] || 0 },
          { network: 'tron', fee: map['fee_tron'] || 0 },
          { network: 'sol', fee: map['fee_sol'] || 0 },
          { network: 'eth', fee: map['fee_eth'] || 0 },
          { network: 'bnb', fee: map['fee_bnb'] || 0 }
        ];
        console.log('üîÑ Fallback settings:', settings);
      }
      // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∞–∫–∂–µ –∫–∞—Ä—Ç—É app_settings (–¥–ª—è –æ–±–º–µ–Ω–∞ –∏ –¥—Ä.)
      let appRows = [];
      try {
        appRows = await supabaseRequest('app_settings', 'GET', null, { select: '*' });
      } catch (e) {
        console.warn('app_settings read error:', e.message);
      }
      const app = {};
      (appRows || []).forEach(r => { app[r.key] = r.value; });
      console.log('‚úÖ Final settings response (fees + app):', { settingsLen: settings?.length || 0, appKeys: Object.keys(app).length });
      return res.status(200).json({ success: true, settings, app });
    } else if (method === 'PUT' || method === 'PATCH' || method === 'POST') {
      const updates = req.body?.settings || [];
      const appUpdates = req.body?.app_settings || null; // { key: value }
      // 1) –ö–æ–º–∏—Å—Å–∏–∏ –≤—ã–≤–æ–¥–æ–≤ (withdraw_fees): –æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç [{ network: 'ton', fee: 0.01 }, ...]
      if (Array.isArray(updates) && updates.length) {
        for (const { network, fee } of updates) {
          if (!network) continue;
          const existing = await supabaseRequest('withdraw_fees', 'GET', null, { network: `eq.${network}` });
          if (existing && existing.length) {
            await supabaseRequest('withdraw_fees', 'PATCH', { fee, updated_at: new Date().toISOString() }, { network: `eq.${network}` });
          } else {
            await supabaseRequest('withdraw_fees', 'POST', { network, fee });
          }
        }
      }
      // 2) –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ app_settings (–≤–∫–ª—é—á–∞—è exchange_* –∫–ª—é—á–∏)
      if (appUpdates && typeof appUpdates === 'object') {
        for (const [key, value] of Object.entries(appUpdates)) {
          const existing = await supabaseRequest('app_settings', 'GET', null, { key: `eq.${key}` });
          if (existing && existing.length) {
            await supabaseRequest('app_settings', 'PATCH', { value, updated_at: new Date().toISOString() }, { key: `eq.${key}` });
          } else {
            await supabaseRequest('app_settings', 'POST', { key, value });
          }
        }
      }
      return res.status(200).json({ success: true, message: 'Settings saved' });
    } else {
      return res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
    }
  } catch (e) {
    console.error('Settings API error:', e);
    return res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: e.message });
  }
}


