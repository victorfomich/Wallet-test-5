// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
import { supabaseRequest } from './supabase.js';

export default async function handler(req, res) {
    // –†–∞–∑—Ä–µ—à–∞–µ–º CORS
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    
    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }
    
    try {
        const { method } = req;
        
        if (method === 'GET') {
            // –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const { telegram_id } = req.query;
            
            if (!telegram_id) {
                return res.status(400).json({ 
                    error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegram_id' 
                });
            }
            
            // –ò—â–µ–º –ø–æ user_id –∏–ª–∏ telegram_id (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã)
            let transactions = await supabaseRequest('transactions', 'GET', null, {
                user_id: `eq.${telegram_id}`,
                order: 'created_at.desc'
            });
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ user_id, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ telegram_id
            if (!transactions || transactions.length === 0) {
                transactions = await supabaseRequest('transactions', 'GET', null, {
                    telegram_id: `eq.${telegram_id}`,
                    order: 'created_at.desc'
                });
            }
            
            return res.status(200).json({ 
                success: true, 
                transactions: transactions || [] 
            });
            
        } else if (method === 'POST') {
            // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—ã–≤–æ–¥–∞
            const { 
                telegram_id, 
                type = 'withdraw',
                crypto = 'USDT', 
                network, 
                amount, 
                fee = 0,
                address, 
                comment = null 
            } = req.body;
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            if (!telegram_id || !network || !amount || !address) {
                return res.status(400).json({ 
                    error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: telegram_id, network, amount, address' 
                });
            }
            
            if (amount <= 0) {
                return res.status(400).json({ 
                    error: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0' 
                });
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userBalances = await supabaseRequest('user_balances', 'GET', null, {
                telegram_id: `eq.${telegram_id}`
            });
            
            if (!userBalances || userBalances.length === 0) {
                return res.status(400).json({ 
                    error: '–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω' 
                });
            }
            
            const balance = userBalances[0];
            const currentBalance = balance[`${crypto.toLowerCase()}_amount`] || 0;
            
            if (currentBalance < amount) {
                return res.status(400).json({ 
                    error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å: ${currentBalance} ${crypto}, –∑–∞–ø—Ä–æ—à–µ–Ω–æ: ${amount} ${crypto}` 
                });
            }
            
            // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ–π)
            const transactionData = {
                user_id: parseInt(telegram_id), // –æ—Å–Ω–æ–≤–Ω–æ–π ID –≤ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ
                telegram_id: parseInt(telegram_id), // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                type,
                currency: crypto.toUpperCase(), // –≤–∞—à–µ –ø–æ–ª–µ currency
                network: network.toLowerCase(),
                amount: parseFloat(amount),
                fee: parseFloat(fee), // –µ—Å–ª–∏ –ø–æ–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
                address: address.trim(), // –µ—Å–ª–∏ –ø–æ–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
                comment: comment ? comment.trim() : null, // –µ—Å–ª–∏ –ø–æ–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
                status: 'pending'
            };
            
            const newTransaction = await supabaseRequest('transactions', 'POST', transactionData);
            
            if (!newTransaction || newTransaction.length === 0) {
                throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—ã—á–∏—Ç–∞–µ–º —Å—É–º–º—É)
            const newBalance = currentBalance - amount;
            const updateBalanceData = {
                [`${crypto.toLowerCase()}_amount`]: newBalance,
                updated_at: new Date().toISOString()
            };
            
            await supabaseRequest('user_balances', 'PATCH', updateBalanceData, {
                telegram_id: `eq.${telegram_id}`
            });
            
            console.log(`‚úÖ –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ê: ${amount} ${crypto} -> ${address} (${network})`);
            console.log(`üí∞ –ë–ê–õ–ê–ù–° –û–ë–ù–û–í–õ–ï–ù: ${currentBalance} -> ${newBalance} ${crypto}`);
            
            return res.status(201).json({ 
                success: true, 
                transaction: newTransaction[0],
                message: `–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ –≤—ã–≤–æ–¥ ${amount} ${crypto} —Å–æ–∑–¥–∞–Ω–∞`,
                new_balance: newBalance
            });
            
        } else if (method === 'PUT') {
            // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
            const { id } = req.query;
            const { status, tx_hash } = req.body;
            
            if (!id) {
                return res.status(400).json({ 
                    error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' 
                });
            }
            
            const updateData = {
                updated_at: new Date().toISOString()
            };
            
            if (status) updateData.status = status;
            if (tx_hash) updateData.tx_hash = tx_hash;
            
            const updatedTransaction = await supabaseRequest('transactions', 'PATCH', updateData, {
                id: `eq.${id}`
            });
            
            return res.status(200).json({ 
                success: true, 
                transaction: updatedTransaction[0],
                message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
            });
            
        } else {
            return res.status(405).json({ 
                error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' 
            });
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ API —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
        return res.status(500).json({ 
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            details: error.message 
        });
    }
}
