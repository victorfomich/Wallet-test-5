// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
export default async function handler(req, res) {
    // –†–∞–∑—Ä–µ—à–∞–µ–º CORS
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    
    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const envStatus = {
            SUPABASE_URL: {
                exists: !!process.env.SUPABASE_URL,
                value: process.env.SUPABASE_URL ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù',
                preview: process.env.SUPABASE_URL ? process.env.SUPABASE_URL.substring(0, 30) + '...' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
            },
            SUPABASE_ANON_KEY: {
                exists: !!process.env.SUPABASE_ANON_KEY,
                value: process.env.SUPABASE_ANON_KEY ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù',
                preview: process.env.SUPABASE_ANON_KEY ? process.env.SUPABASE_ANON_KEY.substring(0, 20) + '...' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
            },
            SUPABASE_SERVICE_KEY: {
                exists: !!process.env.SUPABASE_SERVICE_KEY,
                value: process.env.SUPABASE_SERVICE_KEY ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù',
                preview: process.env.SUPABASE_SERVICE_KEY ? process.env.SUPABASE_SERVICE_KEY.substring(0, 20) + '...' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
            }
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase
        let connectionTest = null;
        let databaseTest = null;
        
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        const { SUPABASE_URL, SUPABASE_ANON_KEY } = await import('./supabase.js');
        
        if (SUPABASE_URL && SUPABASE_ANON_KEY && !SUPABASE_URL.includes('YOUR_PROJECT_ID')) {
            try {
                // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                const testUrl = `${SUPABASE_URL}/rest/v1/address_sets?limit=1`;
                const testResponse = await fetch(testUrl, {
                    headers: {
                        'apikey': SUPABASE_ANON_KEY,
                        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
                    }
                });
                
                connectionTest = {
                    success: testResponse.ok,
                    status: testResponse.status,
                    statusText: testResponse.statusText,
                    error: testResponse.ok ? null : await testResponse.text()
                };
                
                // –¢–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
                if (testResponse.ok) {
                    const data = await testResponse.json();
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
                    const countUrl = `${SUPABASE_URL}/rest/v1/address_sets?is_used=eq.false&select=count`;
                    const countResponse = await fetch(countUrl, {
                        headers: {
                            'apikey': SUPABASE_ANON_KEY,
                            'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
                            'Prefer': 'count=exact'
                        }
                    });
                    
                    databaseTest = {
                        tables_exist: true,
                        sample_data: data.length > 0,
                        available_addresses: countResponse.headers.get('content-range')?.split('/')[1] || 'unknown',
                        first_address_sample: data[0] || null
                    };
                }
                
            } catch (error) {
                connectionTest = {
                    success: false,
                    error: error.message
                };
            }
        } else {
            connectionTest = {
                success: false,
                error: SUPABASE_URL?.includes('YOUR_PROJECT_ID') ? 
                    '–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∏ –∫–ª—é—á–µ–π - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –≤ api/supabase.js' : 
                    '–ö–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'
            };
        }
        
        return res.status(200).json({
            success: true,
            timestamp: new Date().toISOString(),
            environment: process.env.NODE_ENV || 'development',
            variables: envStatus,
            connection_test: connectionTest,
            database_test: databaseTest,
            recommendations: getRecommendations(envStatus, connectionTest, databaseTest)
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
        return res.status(500).json({
            success: false,
            error: error.message,
            stack: error.stack
        });
    }
}

function getRecommendations(envStatus, connectionTest, databaseTest) {
    const recommendations = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–ª—É—à–µ–∫
    if (connectionTest?.error?.includes('–∑–∞–≥–ª—É—à–∫–∏')) {
        recommendations.push("üî• –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –∑–∞–≥–ª—É—à–∫–∏ –≤ api/supabase.js –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ Supabase");
        recommendations.push("üìñ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ CREATE_SUPABASE_PROJECT.md");
        return recommendations;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!envStatus.SUPABASE_URL.exists && !connectionTest?.success) {
        recommendations.push("–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é SUPABASE_URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Vercel –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç–µ –∑–∞–≥–ª—É—à–∫—É –≤ –∫–æ–¥–µ");
    }
    
    if (!envStatus.SUPABASE_ANON_KEY.exists && !connectionTest?.success) {
        recommendations.push("–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é SUPABASE_ANON_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Vercel –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç–µ –∑–∞–≥–ª—É—à–∫—É –≤ –∫–æ–¥–µ");
    }
    
    if (!envStatus.SUPABASE_SERVICE_KEY.exists) {
        recommendations.push("–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é SUPABASE_SERVICE_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Vercel (–Ω—É–∂–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏)");
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (connectionTest && !connectionTest.success) {
        if (connectionTest.error?.includes('404')) {
            recommendations.push("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL Supabase –ø—Ä–æ–µ–∫—Ç–∞");
        } else if (connectionTest.error?.includes('401') || connectionTest.error?.includes('403')) {
            recommendations.push("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–π API Supabase");
        } else if (connectionTest.error?.includes('relation') || connectionTest.error?.includes('does not exist')) {
            recommendations.push("–í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç supabase-setup-improved.sql –≤ Supabase SQL Editor");
        } else {
            recommendations.push("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase");
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
    if (databaseTest) {
        if (!databaseTest.sample_data) {
            recommendations.push("–í —Ç–∞–±–ª–∏—Ü–µ address_sets –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏");
        } else if (databaseTest.available_addresses === '0') {
            recommendations.push("–í—Å–µ –∞–¥—Ä–µ—Å–∞ –∑–∞–Ω—è—Ç—ã! –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É address_sets");
        } else {
            recommendations.push(`‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–æ—Å—Ç—É–ø–Ω–æ ${databaseTest.available_addresses} –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        }
    }
    
    if (recommendations.length === 0) {
        recommendations.push("üéâ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã! DreamWallet –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!");
    }
    
    return recommendations;
}
