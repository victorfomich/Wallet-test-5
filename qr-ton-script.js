// Telegram Web App API
let tg = window.Telegram.WebApp;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let selectedNetwork = 'ton';
let qrCode = null;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ QR –∫–æ–¥–∞
console.log('QRCodeStyling –∑–∞–≥—Ä—É–∂–µ–Ω:', typeof QRCodeStyling !== 'undefined');
if (typeof QRCodeStyling === 'undefined') {
    console.error('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ QRCodeStyling –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Web App
    if (tg && tg.ready) {
        tg.ready();
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
    initTheme();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º TON –∞–¥—Ä–µ—Å
    selectNetwork('ton');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    initAppRestrictions();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
function initTheme() {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–º–Ω—É—é —Ç–µ–º—É
    document.documentElement.setAttribute('data-theme', 'dark');
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
    updateCopyIcons();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
function updateCopyIcons() {
    const copyLight = document.querySelector('.copy-light');
    const copyDark = document.querySelector('.copy-dark');
    
    if (copyLight && copyDark) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–º–Ω—É—é –∏–∫–æ–Ω–∫—É
        copyLight.style.display = 'none';
        copyDark.style.display = 'block';
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º opacity –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è
        copyDark.style.opacity = '0.3';
    }
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Ç–∏
async function selectNetwork(network) {
    selectedNetwork = network;
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
    if (!window.userManager.isUserInitialized()) {
        const loaded = window.userManager.loadFromLocalStorage();
        if (!loaded) {
            console.warn('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥—Ä–µ—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–∏ –∏ –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let networkInfo = window.userManager.getNetworkWithAddress(network);
    
    // –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥—Ä–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (!networkInfo || !networkInfo.address) {
        console.warn(`–ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–µ—Ç–∏ ${network} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥—Ä–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`);
        const defaultNetworkInfo = getAddress(network);
        if (defaultNetworkInfo) {
            networkInfo = {
                ...defaultNetworkInfo,
                isUserAddress: false
            };
        }
    } else {
        networkInfo.isUserAddress = true;
    }
    
    if (networkInfo) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º QR –∫–∞—Ä—Ç–æ—á–∫—É
        showQRCard(networkInfo);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥—Ä–µ—Å–µ
        showAddressInfo(networkInfo);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        showTopupButton();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–¥—Ä–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (!networkInfo.isUserAddress) {
            showDefaultAddressWarning();
        }
    } else {
        showNetworkError(network);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ QR –∫–∞—Ä—Ç–æ—á–∫–∏
function showQRCard(networkInfo) {
    const qrContainer = document.getElementById('qrContainer');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥
    generateQRCode(networkInfo.address, networkInfo);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞
function generateQRCode(address, networkInfo) {
    const qrContainer = document.getElementById('qrContainer');
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    qrContainer.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º QR –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ qr-code-styling
    const qrCodeOptions = {
        width: 240,
        height: 240,
        type: "svg",
        data: address,
        image: networkInfo.icon || "toncoin.png",
        dotsOptions: {
            color: networkInfo.color || "#0088cc",
            type: "rounded"
        },
        backgroundOptions: {
            color: "#ffffff"
        },
        imageOptions: {
            crossOrigin: "anonymous",
            margin: 10
        },
        cornersSquareOptions: {
            color: networkInfo.color || "#0088cc",
            type: "extra-rounded"
        },
        cornersDotOptions: {
            color: networkInfo.color || "#0088cc",
            type: "dot"
        }
    };
    
    try {
        console.log('–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR –∫–æ–¥–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', qrCodeOptions);
        console.log('QRCodeStyling –¥–æ—Å—Ç—É–ø–µ–Ω:', typeof QRCodeStyling);
        
        qrCode = new QRCodeStyling(qrCodeOptions);
        console.log('QR –∫–æ–¥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', qrCode);
        
        qrCode.append(qrContainer);
        console.log('QR –∫–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞:', error);
        // Fallback - –ø—Ä–æ—Å—Ç–æ–π QR –∫–æ–¥
        qrContainer.innerHTML = `<div style="width: 200px; height: 200px; background-color: #f0f0f0; display: flex; align-items: center; justify-content: center; border-radius: 8px;">
            <div style="text-align: center; color: #666;">
                <div style="font-size: 24px; margin-bottom: 8px;">üì±</div>
                <div style="font-size: 12px;">QR –∫–æ–¥</div>
                <div style="font-size: 10px; margin-top: 4px;">TON</div>
            </div>
        </div>`;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–¥—Ä–µ—Å–µ
function showAddressInfo(networkInfo) {
    const addressText = document.getElementById('addressText');
    const addressDisplay = document.getElementById('addressDisplay');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–ª–æ–∫–µ
    addressText.textContent = networkInfo.address;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –≤ –∫–Ω–æ–ø–∫–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (addressDisplay) {
        addressDisplay.textContent = networkInfo.address;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
function showTopupButton() {
    // –ö–Ω–æ–ø–∫–∞ —É–∂–µ –≤–∏–¥–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
function showDefaultAddressWarning() {
    const container = document.querySelector('.container');
    const warning = document.createElement('div');
    warning.style.cssText = `
        background: rgba(255, 193, 7, 0.1);
        border: 1px solid rgba(255, 193, 7, 0.3);
        border-radius: 8px;
        padding: 15px;
        margin: 15px 0;
        color: #856404;
        font-size: 14px;
        text-align: center;
    `;
    warning.innerHTML = '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.';
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ QR –∫–∞—Ä—Ç–æ—á–∫–∏
    const qrCard = document.getElementById('qrCard');
    if (qrCard && qrCard.nextSibling) {
        container.insertBefore(warning, qrCard.nextSibling);
    } else {
        container.appendChild(warning);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É —Å–µ—Ç–∏
function showNetworkError(network) {
    const container = document.querySelector('.container');
    const error = document.createElement('div');
    error.style.cssText = `
        background: rgba(220, 53, 69, 0.1);
        border: 1px solid rgba(220, 53, 69, 0.3);
        border-radius: 8px;
        padding: 20px;
        margin: 20px 0;
        color: #721c24;
        text-align: center;
    `;
    error.innerHTML = `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Å–µ—Ç–∏ ${network}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.`;
    container.appendChild(error);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
function copyAddress() {
    if (selectedNetwork) {
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let networkInfo = window.userManager.getNetworkWithAddress(selectedNetwork);
        
        // –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥—Ä–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (!networkInfo || !networkInfo.address) {
            networkInfo = getAddress(selectedNetwork);
        }
        
        if (networkInfo) {
            // –ê–Ω–∏–º–∞—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            const copyIcon = document.querySelector('.copy-icon');
            const copyLight = copyIcon.querySelector('.copy-light');
            const copyDark = copyIcon.querySelector('.copy-dark');
            const checkmark = copyIcon.querySelector('.checkmark');
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∞—è –∏–∫–æ–Ω–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
            const activeIcon = copyIcon.querySelector('.copy-light').style.display !== 'none' ? copyLight : copyDark;
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏–∫–æ–Ω–∫—É
            activeIcon.style.opacity = '0';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–æ—á–∫—É
            setTimeout(() => {
                checkmark.style.opacity = '1';
                checkmark.classList.add('visible');
            }, 200);
            
            // –°–∫—Ä—ã–≤–∞–µ–º –≥–∞–ª–æ—á–∫—É —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏–∫–æ–Ω–∫—É
            setTimeout(() => {
                checkmark.style.opacity = '0';
                checkmark.classList.remove('visible');
                setTimeout(() => {
                    activeIcon.style.opacity = '0.3';
                }, 200);
            }, 1700);
            
            navigator.clipboard.writeText(networkInfo.address).then(() => {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
                if (tg && tg.showAlert) {
                    tg.showAlert('–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
                } else {
                    alert('–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
                }
            }).catch(err => {
                console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
                // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
                const textArea = document.createElement('textarea');
                textArea.value = networkInfo.address;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                
                if (tg && tg.showAlert) {
                    tg.showAlert('–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
                } else {
                    alert('–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
                }
            });
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∞–¥—Ä–µ—Å–æ–º
function shareAddress() {
    if (selectedNetwork) {
        const networkInfo = getAddress(selectedNetwork);
        if (networkInfo) {
            const shareData = {
                title: `TON –ê–¥—Ä–µ—Å`,
                text: `–ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è TON`,
                url: networkInfo.address
            };
            
            if (navigator.share) {
                navigator.share(shareData).catch(err => {
                    console.error('–û—à–∏–±–∫–∞ —à–∞—Ä–∏–Ω–≥–∞:', err);
                });
            } else {
                // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Web Share API
                copyAddress();
            }
        }
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initAppRestrictions() {
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é (–ø—Ä–∞–≤—ã–π –∫–ª–∏–∫)
    document.addEventListener('contextmenu', function(e) {
        e.preventDefault();
        return false;
    });
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    document.addEventListener('selectstart', function(e) {
        e.preventDefault();
        return false;
    });
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    document.addEventListener('dragstart', function(e) {
        e.preventDefault();
        return false;
    });
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
    document.addEventListener('dblclick', function(e) {
        e.preventDefault();
        return false;
    });
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∑—É–º –∂–µ—Å—Ç–∞–º–∏
    document.addEventListener('gesturestart', function(e) {
        e.preventDefault();
        return false;
    });
    
    document.addEventListener('gesturechange', function(e) {
        e.preventDefault();
        return false;
    });
    
    document.addEventListener('gestureend', function(e) {
        e.preventDefault();
        return false;
    });
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∑—É–º –∫–æ–ª–µ—Å–∏–∫–æ–º –º—ã—à–∏
    document.addEventListener('wheel', function(e) {
        if (e.ctrlKey) {
            e.preventDefault();
            return false;
        }
    }, { passive: false });
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∑—É–º –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    document.addEventListener('touchstart', function(e) {
        if (e.touches.length > 1) {
            e.preventDefault();
            return false;
        }
    }, { passive: false });
    
    document.addEventListener('touchmove', function(e) {
        if (e.touches.length > 1) {
            e.preventDefault();
            return false;
        }
    }, { passive: false });
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É TON
function goBack() {
    if (tg && tg.BackButton) {
        tg.BackButton.show();
        tg.BackButton.onClick(() => {
            window.location.href = 'ton.html';
        });
    } else {
        // –ï—Å–ª–∏ Telegram Web App –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        const backButton = document.createElement('button');
        backButton.textContent = '‚Üê –ù–∞–∑–∞–¥';
        backButton.style.cssText = `
            position: fixed;
            top: 20px;
            left: 20px;
            padding: 8px 16px;
            background-color: #0088cc;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            z-index: 1000;
        `;
        backButton.onclick = () => window.location.href = 'ton.html';
        document.body.appendChild(backButton);
    }
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
goBack();