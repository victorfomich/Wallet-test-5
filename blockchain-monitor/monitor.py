# Main blockchain monitor
import asyncio
import time
from datetime import datetime
from typing import Dict, List, Set
from database import SupabaseClient
from blockchain_clients import create_blockchain_client
from config import NETWORKS, CHECK_INTERVAL, MIN_AMOUNT, REQUEST_DELAY, BATCH_SIZE, MAX_RETRIES, RETRY_DELAY, logger

class BlockchainMonitor:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–ª–æ–∫—á–µ–π–Ω–æ–≤"""
    
    def __init__(self):
        self.processed_txs: Set[str] = set()
        self.db = SupabaseClient(self.processed_txs)
        self.clients = {}
        self.last_balances: Dict[str, float] = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ç–µ–π
        for network in NETWORKS.keys():
            client = create_blockchain_client(network)
            if client:
                self.clients[network] = client
                logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç –¥–ª—è {network.upper()} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è {network.upper()}")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BlockchainMonitor...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        processed = await self.db.get_processed_transactions()
        self.processed_txs.update(processed)
        logger.info(f"üìù –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(processed)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        
        logger.info("‚úÖ BlockchainMonitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def check_address_transactions(self, address: str, network: str, user_telegram_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞"""
        if network not in self.clients:
            logger.warning(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –¥–ª—è {network} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        client = self.clients[network]
        network_config = NETWORKS[network]
        
        try:
            logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {network.upper()} –∞–¥—Ä–µ—Å: {address[:8]}... –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            native_transactions = await client.get_transactions(address)
            
            for tx in native_transactions:
                tx_hash = tx.get('hash') or tx.get('txid') or tx.get('signature', '')
                if not tx_hash:
                    logger.debug(f"üîç –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–µ–∑ —Ö–µ—à–∞: {tx}")
                    continue
                    
                if tx_hash in self.processed_txs:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤—Ö–æ–¥—è—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è (TO –∞–¥—Ä–µ—Å = –Ω–∞—à –∞–¥—Ä–µ—Å)
                to_address = tx.get('to', '').lower()
                from_address = tx.get('from', '').lower()
                our_address = address.lower()
                
                # –î–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ç–µ–π –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                is_incoming = False
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                tx_type = tx.get('type', 'incoming')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Ö–æ–¥—è—â–∞—è
                
                if network == 'ton':
                    # –î–ª—è TON –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ to –∏ destination, –ø–ª—é—Å —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∞–¥—Ä–µ—Å–æ–≤ (UQ/EQ)
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ UQ/EQ
                    our_addr_clean = our_address[2:] if our_address.startswith(('uq', 'eq')) else our_address
                    to_addr_clean = to_address[2:] if to_address.startswith(('uq', 'eq')) else to_address
                    from_addr_clean = from_address[2:] if from_address.startswith(('uq', 'eq')) else from_address
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ—Ö–æ–∂–µ—Å—Ç—å (–ø–µ—Ä–≤—ã–µ 40 —Å–∏–º–≤–æ–ª–æ–≤)
                    to_match = (to_address == our_address or 
                              tx.get('destination', '').lower() == our_address or
                              (to_addr_clean and our_addr_clean and to_addr_clean == our_addr_clean) or
                              (len(our_addr_clean) >= 40 and len(to_addr_clean) >= 40 and our_addr_clean[:40] == to_addr_clean[:40]))
                    
                    from_match = (from_address == our_address or 
                                tx.get('source', '').lower() == our_address or
                                (from_addr_clean and our_addr_clean and from_addr_clean == our_addr_clean) or
                                (len(our_addr_clean) >= 40 and len(from_addr_clean) >= 40 and our_addr_clean[:40] == from_addr_clean[:40]))
                    
                    if tx_type == 'incoming':
                        is_incoming = to_match
                    elif tx_type == 'outgoing':
                        is_incoming = from_match  # –î–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö - —ç—Ç–æ "–Ω–∞—à–∞" —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –µ—Å–ª–∏ –º—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏
                    else:
                        is_incoming = to_match  # Fallback
                    
                    logger.debug(f"üîç TON –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–∞—à={our_address[:8]}..., to={to_address[:8] if to_address else 'N/A'}..., from={from_address[:8] if from_address else 'N/A'}..., type={tx_type}, match={is_incoming}")
                else:
                    if tx_type == 'incoming':
                        is_incoming = (to_address == our_address and from_address != our_address)
                    elif tx_type == 'outgoing':
                        is_incoming = (from_address == our_address and to_address != our_address)
                    else:
                        is_incoming = (to_address == our_address and from_address != our_address)
                
                if is_incoming:
                    # –≠—Ç–æ –Ω–∞—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è (–≤—Ö–æ–¥—è—â–∞—è –∏–ª–∏ –∏—Å—Ö–æ–¥—è—â–∞—è)
                    amount = float(tx.get('amount', 0))
                    if amount > MIN_AMOUNT:
                        currency = network_config['native_token'].lower()
                        
                        if tx_type == 'incoming':
                            logger.info(f"üí∞ –í–•–û–î–Ø–©–ê–Ø {currency.upper()}: +{amount} {currency.upper()} –Ω–∞ {address[:8]}... –æ—Ç {from_address[:8] if from_address else 'N/A'}... (tx: {tx_hash[:8]}...)")
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–±–∞–≤–ª—è–µ–º)
                            balance_updated = await self.db.update_balance(user_telegram_id, currency, amount)
                            if balance_updated:
                                logger.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: +{amount} {currency.upper()} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
                            
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç
                            deposit_recorded = await self.db.record_deposit(
                                user_telegram_id, network, currency.upper(), 
                                amount, tx_hash, address
                            )
                            if deposit_recorded:
                                logger.info(f"üìù –î–µ–ø–æ–∑–∏—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ –±–∞–∑—É")
                                
                        elif tx_type == 'outgoing':
                            logger.info(f"üí∏ –ò–°–•–û–î–Ø–©–ê–Ø {currency.upper()}: -{amount} {currency.upper()} —Å {address[:8]}... –∫ {to_address[:8] if to_address else 'N/A'}... (tx: {tx_hash[:8]}...)")
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—ã—á–∏—Ç–∞–µ–º)
                            balance_updated = await self.db.update_balance(user_telegram_id, currency, -amount)
                            if balance_updated:
                                logger.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: -{amount} {currency.upper()} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
                            
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–≤–æ–¥
                            withdrawal_recorded = await self.db.record_withdrawal(
                                user_telegram_id, network, currency.upper(), 
                                amount, tx_hash, address, to_address
                            )
                            if withdrawal_recorded:
                                logger.info(f"üìù –í—ã–≤–æ–¥ –∑–∞–ø–∏—Å–∞–Ω –≤ –±–∞–∑—É")
                        
                        # –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
                        self.processed_txs.add(tx_hash)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            usdt_contract = network_config.get('usdt_contract')
            if usdt_contract:
                logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º USDT –∫–æ–Ω—Ç—Ä–∞–∫—Ç {usdt_contract} –¥–ª—è {address[:8]}...")
                usdt_transactions = await client.get_transactions(address, usdt_contract)
                
                for tx in usdt_transactions:
                    tx_hash = tx.get('hash') or tx.get('txid') or tx.get('signature', '') or tx.get('transaction_id', '')
                    if not tx_hash:
                        logger.debug(f"üîç –ü—Ä–æ–ø—É—Å–∫–∞–µ–º USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–µ–∑ —Ö–µ—à–∞: {tx}")
                        continue
                        
                    if tx_hash in self.processed_txs:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤—Ö–æ–¥—è—â–∞—è USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                    to_address = tx.get('to', '').lower()
                    from_address = tx.get('from', '').lower()
                    our_address = address.lower()
                    
                    if to_address == our_address and from_address != our_address:
                        # –≠—Ç–æ –≤—Ö–æ–¥—è—â–∞—è USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                        amount = float(tx.get('amount', 0))
                        if amount > MIN_AMOUNT:
                            logger.info(f"üí∞ –í–•–û–î–Ø–©–ò–ô USDT: +{amount} USDT –Ω–∞ {address[:8]}... –æ—Ç {from_address[:8] if from_address else 'N/A'}... ({network.upper()}, tx: {tx_hash[:8]}...)")
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º USDT –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            balance_updated = await self.db.update_balance(user_telegram_id, 'usdt', amount)
                            if balance_updated:
                                logger.info(f"‚úÖ USDT –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
                            
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç
                            deposit_recorded = await self.db.record_deposit(
                                user_telegram_id, network, 'USDT', 
                                amount, tx_hash, address
                            )
                            if deposit_recorded:
                                logger.info(f"üìù USDT –¥–µ–ø–æ–∑–∏—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ –±–∞–∑—É")
                            
                            # –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
                            self.processed_txs.add(tx_hash)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π {address} –≤ {network}: {e}")
            import traceback
            logger.error(f"–¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")
            return False
    
    async def monitor_addresses(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤ —Å –æ–±—Ö–æ–¥–æ–º –ª–∏–º–∏—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ê–ö–¢–ò–í–ù–´–ï –∞–¥—Ä–µ—Å–∞ –∏–∑ –±–∞–∑—ã (is_used = true)
            address_sets = await self.db.get_addresses()
            
            if not address_sets:
                logger.warning("‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (is_used = true)")
                return
            
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {len(address_sets)} –ê–ö–¢–ò–í–ù–´–• –Ω–∞–±–æ—Ä–æ–≤ –∞–¥—Ä–µ—Å–æ–≤...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –ª–∏–º–∏—Ç–æ–≤
            total_checks = 0
            successful_checks = 0
            
            for addr_set in address_sets:
                user_telegram_id = addr_set.get('assigned_to_telegram_id')
                if not user_telegram_id:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–±–æ—Ä –±–µ–∑ telegram_id: {addr_set.get('name', 'unknown')}")
                    continue
                
                logger.info(f"üë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id} (–Ω–∞–±–æ—Ä: {addr_set.get('name', 'unknown')})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ—Ç—å —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
                for network in NETWORKS.keys():
                    address_field = f"{network}_address"
                    address = addr_set.get(address_field)
                    
                    if address and address.strip():
                        logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {network.upper()}: {address}")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                        if total_checks > 0:
                            await asyncio.sleep(REQUEST_DELAY)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ª–∏–º–∏—Ç–æ–≤
                        success = False
                        for attempt in range(MAX_RETRIES):
                            try:
                                success = await self.check_address_transactions(address, network, user_telegram_id)
                                if success:
                                    successful_checks += 1
                                    break
                                else:
                                    logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_RETRIES} –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è {network}:{address[:8]}...")
                            except Exception as e:
                                error_msg = str(e).lower()
                                
                                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
                                if "429" in error_msg or "too many requests" in error_msg:
                                    logger.error(f"üö´ Rate limit –¥–ª—è {network}:{address[:8]}... - –∂–¥–µ–º {RETRY_DELAY} —Å–µ–∫—É–Ω–¥")
                                    await asyncio.sleep(RETRY_DELAY)
                                elif "400" in error_msg or "bad request" in error_msg:
                                    logger.error(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å {network}:{address[:8]}... - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                                    break  # –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
                                else:
                                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1}/{MAX_RETRIES} –¥–ª—è {network}:{address[:8]}...: {e}")
                                
                                if attempt < MAX_RETRIES - 1:
                                    await asyncio.sleep(REQUEST_DELAY * 2)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                        
                        total_checks += 1
                    else:
                        logger.debug(f"üîç –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç–æ–π {network} –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
            
            logger.info(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {successful_checks}/{total_checks} —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–¥—Ä–µ—Å–æ–≤: {e}")
            import traceback
            logger.error(f"–¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥")
        
        while True:
            try:
                start_time = time.time()
                logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ {datetime.now().strftime('%H:%M:%S')}")
                
                await self.monitor_addresses()
                
                end_time = time.time()
                duration = end_time - start_time
                logger.info(f"‚è±Ô∏è –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(CHECK_INTERVAL)
                
            except KeyboardInterrupt:
                logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(CHECK_INTERVAL)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üåü –ó–∞–ø—É—Å–∫ DreamWallet Blockchain Monitor")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä
    monitor = BlockchainMonitor()
    await monitor.initialize()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    await monitor.start_monitoring()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
