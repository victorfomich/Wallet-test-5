# Main blockchain monitor
import asyncio
import time
from datetime import datetime
from typing import Dict, List, Set
from database import SupabaseClient
from blockchain_clients import create_blockchain_client
from config import NETWORKS, CHECK_INTERVAL, MIN_AMOUNT, logger

class BlockchainMonitor:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–ª–æ–∫—á–µ–π–Ω–æ–≤"""
    
    def __init__(self):
        self.db = SupabaseClient()
        self.clients = {}
        self.processed_txs: Set[str] = set()
        self.last_balances: Dict[str, float] = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ç–µ–π
        for network in NETWORKS.keys():
            client = create_blockchain_client(network)
            if client:
                self.clients[network] = client
                logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç –¥–ª—è {network.upper()} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è {network.upper()}")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BlockchainMonitor...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        processed = await self.db.get_processed_transactions()
        self.processed_txs.update(processed)
        logger.info(f"üìù –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(processed)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        
        logger.info("‚úÖ BlockchainMonitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def check_address_transactions(self, address: str, network: str, user_telegram_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞"""
        if network not in self.clients:
            return False
        
        client = self.clients[network]
        network_config = NETWORKS[network]
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            native_transactions = await client.get_transactions(address)
            
            for tx in native_transactions:
                tx_hash = tx.get('hash') or tx.get('txid') or tx.get('signature', '')
                if not tx_hash or tx_hash in self.processed_txs:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤—Ö–æ–¥—è—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è (TO –∞–¥—Ä–µ—Å = –Ω–∞—à –∞–¥—Ä–µ—Å)
                to_address = tx.get('to', '').lower()
                from_address = tx.get('from', '').lower()
                our_address = address.lower()
                
                if to_address == our_address and from_address != our_address:
                    # –≠—Ç–æ –≤—Ö–æ–¥—è—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                    amount = float(tx.get('amount', 0))
                    if amount > MIN_AMOUNT:
                        currency = network_config['native_token'].lower()
                        if currency == 'trx':
                            currency = 'trx'
                        
                        logger.info(f"üí∞ –í—Ö–æ–¥—è—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: +{amount} {currency.upper()} –Ω–∞ {address[:8]}... (tx: {tx_hash[:8]}...)")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        await self.db.update_balance(user_telegram_id, currency, amount)
                        
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç
                        await self.db.record_deposit(
                            user_telegram_id, network, currency.upper(), 
                            amount, tx_hash, address
                        )
                        
                        # –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
                        self.processed_txs.add(tx_hash)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            usdt_contract = network_config.get('usdt_contract')
            if usdt_contract:
                usdt_transactions = await client.get_transactions(address, usdt_contract)
                
                for tx in usdt_transactions:
                    tx_hash = tx.get('hash') or tx.get('txid') or tx.get('signature', '')
                    if not tx_hash or tx_hash in self.processed_txs:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤—Ö–æ–¥—è—â–∞—è USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                    to_address = tx.get('to', '').lower()
                    from_address = tx.get('from', '').lower()
                    our_address = address.lower()
                    
                    if to_address == our_address and from_address != our_address:
                        # –≠—Ç–æ –≤—Ö–æ–¥—è—â–∞—è USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                        amount = float(tx.get('amount', 0))
                        if amount > MIN_AMOUNT:
                            logger.info(f"üí∞ –í—Ö–æ–¥—è—â–∞—è USDT: +{amount} USDT –Ω–∞ {address[:8]}... ({network.upper()}, tx: {tx_hash[:8]}...)")
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º USDT –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            await self.db.update_balance(user_telegram_id, 'usdt', amount)
                            
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç
                            await self.db.record_deposit(
                                user_telegram_id, network, 'USDT', 
                                amount, tx_hash, address
                            )
                            
                            # –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
                            self.processed_txs.add(tx_hash)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ {address} –≤ {network}: {e}")
            return False
    
    async def monitor_addresses(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ –±–∞–∑—ã
            address_sets = await self.db.get_addresses()
            
            if not address_sets:
                logger.warning("‚ö†Ô∏è –ê–¥—Ä–µ—Å–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {len(address_sets)} –Ω–∞–±–æ—Ä–æ–≤ –∞–¥—Ä–µ—Å–æ–≤...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–±–æ—Ä –∞–¥—Ä–µ—Å–æ–≤
            tasks = []
            for addr_set in address_sets:
                user_telegram_id = addr_set.get('assigned_to_telegram_id')
                if not user_telegram_id:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ—Ç—å
                for network in NETWORKS.keys():
                    address_field = f"{network}_address"
                    address = addr_set.get(address_field)
                    
                    if address:
                        task = self.check_address_transactions(address, network, user_telegram_id)
                        tasks.append(task)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            if tasks:
                results = await asyncio.gather(*tasks, return_exceptions=True)
                successful = sum(1 for r in results if r is True)
                logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {successful}/{len(tasks)} –ø—Ä–æ–≤–µ—Ä–æ–∫")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–¥—Ä–µ—Å–æ–≤: {e}")
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥")
        
        while True:
            try:
                start_time = time.time()
                logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ {datetime.now().strftime('%H:%M:%S')}")
                
                await self.monitor_addresses()
                
                end_time = time.time()
                duration = end_time - start_time
                logger.info(f"‚è±Ô∏è –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(CHECK_INTERVAL)
                
            except KeyboardInterrupt:
                logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(CHECK_INTERVAL)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üåü –ó–∞–ø—É—Å–∫ DreamWallet Blockchain Monitor")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä
    monitor = BlockchainMonitor()
    await monitor.initialize()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    await monitor.start_monitoring()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
